
Melody.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c5  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000523  00000000  00000000  00000739  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020f  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d9  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00001179  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001211  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	1f d0       	rcall	.+62     	; 0x72 <main>
  34:	29 c0       	rjmp	.+82     	; 0x88 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <beep>:

#include "avrlibdefs.h"

void beep(int freq, int t)
{
	sbi(DDRB,6);// Speaker
  38:	be 9a       	sbi	0x17, 6	; 23
	while (t--)
  3a:	11 c0       	rjmp	.+34     	; 0x5e <__SREG__+0x1f>
	{
		sbi(PORTB,6); // _-_-_-_-
  3c:	c6 9a       	sbi	0x18, 6	; 24
		for(int j=0;j<freq;j++);
  3e:	18 16       	cp	r1, r24
  40:	19 06       	cpc	r1, r25
  42:	8c f4       	brge	.+34     	; 0x66 <__SREG__+0x27>
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	30 e0       	ldi	r19, 0x00	; 0
  48:	2f 5f       	subi	r18, 0xFF	; 255
  4a:	3f 4f       	sbci	r19, 0xFF	; 255
  4c:	82 17       	cp	r24, r18
  4e:	93 07       	cpc	r25, r19
  50:	d9 f7       	brne	.-10     	; 0x48 <__SREG__+0x9>
  52:	0b c0       	rjmp	.+22     	; 0x6a <__SREG__+0x2b>
		cbi(PORTB,6);
		for(int j=0;j<freq;j++);
  54:	2f 5f       	subi	r18, 0xFF	; 255
  56:	3f 4f       	sbci	r19, 0xFF	; 255
  58:	82 17       	cp	r24, r18
  5a:	93 07       	cpc	r25, r19
  5c:	d9 f7       	brne	.-10     	; 0x54 <__SREG__+0x15>
#include "avrlibdefs.h"

void beep(int freq, int t)
{
	sbi(DDRB,6);// Speaker
	while (t--)
  5e:	61 50       	subi	r22, 0x01	; 1
  60:	71 09       	sbc	r23, r1
  62:	60 f7       	brcc	.-40     	; 0x3c <beep+0x4>
  64:	08 95       	ret
	{
		sbi(PORTB,6); // _-_-_-_-
		for(int j=0;j<freq;j++);
		cbi(PORTB,6);
  66:	c6 98       	cbi	0x18, 6	; 24
  68:	fa cf       	rjmp	.-12     	; 0x5e <__SREG__+0x1f>
  6a:	c6 98       	cbi	0x18, 6	; 24
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	f1 cf       	rjmp	.-30     	; 0x54 <__SREG__+0x15>

00000072 <main>:
int main(void)
{
    /* Replace with your application code */
    while (1) 
    {
		beep(200,80);
  72:	60 e5       	ldi	r22, 0x50	; 80
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	88 ec       	ldi	r24, 0xC8	; 200
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	de df       	rcall	.-68     	; 0x38 <beep>
		beep(100,160);
  7c:	60 ea       	ldi	r22, 0xA0	; 160
  7e:	70 e0       	ldi	r23, 0x00	; 0
  80:	84 e6       	ldi	r24, 0x64	; 100
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	d9 df       	rcall	.-78     	; 0x38 <beep>
  86:	f5 cf       	rjmp	.-22     	; 0x72 <main>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
