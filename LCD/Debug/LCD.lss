
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000560  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012fa  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000974  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c96  00000000  00000000  0000235a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  00002ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b7  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001594  00000000  00000000  00003963  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004ef7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	38 c0       	rjmp	.+112    	; 0x74 <__bad_interrupt>
   4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
   6:	36 c0       	rjmp	.+108    	; 0x74 <__bad_interrupt>
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	34 c0       	rjmp	.+104    	; 0x74 <__bad_interrupt>
   c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
   e:	32 c0       	rjmp	.+100    	; 0x74 <__bad_interrupt>
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	30 c0       	rjmp	.+96     	; 0x74 <__bad_interrupt>
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	2e c0       	rjmp	.+92     	; 0x74 <__bad_interrupt>
  18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
  1a:	2c c0       	rjmp	.+88     	; 0x74 <__bad_interrupt>
  1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
  1e:	2a c0       	rjmp	.+84     	; 0x74 <__bad_interrupt>
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	28 c0       	rjmp	.+80     	; 0x74 <__bad_interrupt>
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	48 44       	sbci	r20, 0x48	; 72
  28:	34 34       	cpi	r19, 0x44	; 68
  2a:	37 38       	cpi	r19, 0x87	; 135
  2c:	30 20       	and	r3, r0
  2e:	32 78       	andi	r19, 0x82	; 130
  30:	31 36       	cpi	r19, 0x61	; 97
  32:	20 4c       	sbci	r18, 0xC0	; 192
  34:	43 44       	sbci	r20, 0x43	; 67
	...

00000037 <__c.1994>:
  37:	46 61 72 61 44 61 72 73 00                          FaraDars.

00000040 <__c.1989>:
  40:	25 64 00                                            %d.

00000043 <HexChars>:
  43:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	e9 d0       	rcall	.+466    	; 0x244 <main>
  72:	3a c2       	rjmp	.+1140   	; 0x4e8 <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <lcdInitHW>:
}

void lcdHome(void)
{
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
  76:	c5 98       	cbi	0x18, 5	; 24
  78:	c6 98       	cbi	0x18, 6	; 24
  7a:	c7 98       	cbi	0x18, 7	; 24
  7c:	bd 9a       	sbi	0x17, 5	; 23
  7e:	be 9a       	sbi	0x17, 6	; 23
  80:	bf 9a       	sbi	0x17, 7	; 23
  82:	81 b3       	in	r24, 0x11	; 17
  84:	8f 70       	andi	r24, 0x0F	; 15
  86:	81 bb       	out	0x11, r24	; 17
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	08 95       	ret

00000090 <lcdBusyWait>:
  90:	c5 98       	cbi	0x18, 5	; 24
  92:	81 b3       	in	r24, 0x11	; 17
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	81 bb       	out	0x11, r24	; 17
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	80 6f       	ori	r24, 0xF0	; 240
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	c6 9a       	sbi	0x18, 6	; 24
  a0:	c7 9a       	sbi	0x18, 7	; 24
  a2:	00 00       	nop
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	87 9b       	sbis	0x10, 7	; 16
  aa:	1e c0       	rjmp	.+60     	; 0xe8 <lcdBusyWait+0x58>
  ac:	c7 98       	cbi	0x18, 7	; 24
	...
  ba:	c7 9a       	sbi	0x18, 7	; 24
	...
  c8:	c7 98       	cbi	0x18, 7	; 24
	...
  d6:	c7 9a       	sbi	0x18, 7	; 24
	...
  e4:	87 99       	sbic	0x10, 7	; 16
  e6:	e2 cf       	rjmp	.-60     	; 0xac <lcdBusyWait+0x1c>
  e8:	c7 98       	cbi	0x18, 7	; 24
  ea:	08 95       	ret

000000ec <lcdControlWrite>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	cf df       	rcall	.-98     	; 0x90 <lcdBusyWait>
  f2:	c5 98       	cbi	0x18, 5	; 24
  f4:	c6 98       	cbi	0x18, 6	; 24
  f6:	c7 9a       	sbi	0x18, 7	; 24
  f8:	81 b3       	in	r24, 0x11	; 17
  fa:	80 6f       	ori	r24, 0xF0	; 240
  fc:	81 bb       	out	0x11, r24	; 17
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8f 70       	andi	r24, 0x0F	; 15
 102:	9c 2f       	mov	r25, r28
 104:	90 7f       	andi	r25, 0xF0	; 240
 106:	89 2b       	or	r24, r25
 108:	82 bb       	out	0x12, r24	; 18
	...
 116:	c7 98       	cbi	0x18, 7	; 24
	...
 124:	c7 9a       	sbi	0x18, 7	; 24
 126:	82 b3       	in	r24, 0x12	; 18
 128:	28 2f       	mov	r18, r24
 12a:	2f 70       	andi	r18, 0x0F	; 15
 12c:	30 e1       	ldi	r19, 0x10	; 16
 12e:	c3 9f       	mul	r28, r19
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	82 2b       	or	r24, r18
 136:	82 bb       	out	0x12, r24	; 18
	...
 144:	c7 98       	cbi	0x18, 7	; 24
 146:	81 b3       	in	r24, 0x11	; 17
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	82 b3       	in	r24, 0x12	; 18
 14e:	80 6f       	ori	r24, 0xF0	; 240
 150:	82 bb       	out	0x12, r24	; 18
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <lcdDataWrite>:
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
 15a:	9a df       	rcall	.-204    	; 0x90 <lcdBusyWait>
 15c:	c5 9a       	sbi	0x18, 5	; 24
 15e:	c6 98       	cbi	0x18, 6	; 24
 160:	c7 9a       	sbi	0x18, 7	; 24
 162:	81 b3       	in	r24, 0x11	; 17
 164:	80 6f       	ori	r24, 0xF0	; 240
 166:	81 bb       	out	0x11, r24	; 17
 168:	82 b3       	in	r24, 0x12	; 18
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	9c 2f       	mov	r25, r28
 16e:	90 7f       	andi	r25, 0xF0	; 240
 170:	89 2b       	or	r24, r25
 172:	82 bb       	out	0x12, r24	; 18
	...
 180:	c7 98       	cbi	0x18, 7	; 24
	...
 18e:	c7 9a       	sbi	0x18, 7	; 24
 190:	82 b3       	in	r24, 0x12	; 18
 192:	28 2f       	mov	r18, r24
 194:	2f 70       	andi	r18, 0x0F	; 15
 196:	30 e1       	ldi	r19, 0x10	; 16
 198:	c3 9f       	mul	r28, r19
 19a:	c0 01       	movw	r24, r0
 19c:	11 24       	eor	r1, r1
 19e:	82 2b       	or	r24, r18
 1a0:	82 bb       	out	0x12, r24	; 18
	...
 1ae:	c7 98       	cbi	0x18, 7	; 24
 1b0:	81 b3       	in	r24, 0x11	; 17
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	81 bb       	out	0x11, r24	; 17
 1b6:	82 b3       	in	r24, 0x12	; 18
 1b8:	80 6f       	ori	r24, 0xF0	; 240
 1ba:	82 bb       	out	0x12, r24	; 18
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <lcdInit>:
 1c0:	5a df       	rcall	.-332    	; 0x76 <lcdInitHW>
 1c2:	88 e2       	ldi	r24, 0x28	; 40
 1c4:	93 df       	rcall	.-218    	; 0xec <lcdControlWrite>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	91 df       	rcall	.-222    	; 0xec <lcdControlWrite>
 1ca:	87 e9       	ldi	r24, 0x97	; 151
 1cc:	9a e3       	ldi	r25, 0x3A	; 58
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcdInit+0xe>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcdInit+0x14>
 1d4:	00 00       	nop
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	89 df       	rcall	.-238    	; 0xec <lcdControlWrite>
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	87 df       	rcall	.-242    	; 0xec <lcdControlWrite>
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	85 df       	rcall	.-246    	; 0xec <lcdControlWrite>
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	83 df       	rcall	.-250    	; 0xec <lcdControlWrite>
 1e6:	08 95       	ret

000001e8 <lcdClear>:
}

void lcdClear(void)
{
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 df       	rcall	.-256    	; 0xec <lcdControlWrite>
 1ec:	08 95       	ret

000001ee <lcdGotoXY>:
void lcdGotoXY(u08 x, u08 y)
{
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
 1ee:	62 30       	cpi	r22, 0x02	; 2
 1f0:	31 f0       	breq	.+12     	; 0x1fe <lcdGotoXY+0x10>
 1f2:	63 30       	cpi	r22, 0x03	; 3
 1f4:	31 f0       	breq	.+12     	; 0x202 <lcdGotoXY+0x14>
 1f6:	61 30       	cpi	r22, 0x01	; 1
 1f8:	29 f4       	brne	.+10     	; 0x204 <lcdGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 1fa:	80 5c       	subi	r24, 0xC0	; 192
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <lcdGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 1fe:	8c 5e       	subi	r24, 0xEC	; 236
 200:	01 c0       	rjmp	.+2      	; 0x204 <lcdGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 202:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
 204:	80 68       	ori	r24, 0x80	; 128
 206:	72 df       	rcall	.-284    	; 0xec <lcdControlWrite>
 208:	08 95       	ret

0000020a <beep>:

#include "avrlibdefs.h"

void beep(int freq, int t)
{
	sbi(DDRB,0);// Speaker
 20a:	b8 9a       	sbi	0x17, 0	; 23
	while (t--)
 20c:	11 c0       	rjmp	.+34     	; 0x230 <beep+0x26>
	{
		sbi(PORTB,0); // _-_-_-_-
 20e:	c0 9a       	sbi	0x18, 0	; 24
		for(int j=0;j<freq;j++);
 210:	18 16       	cp	r1, r24
 212:	19 06       	cpc	r1, r25
 214:	8c f4       	brge	.+34     	; 0x238 <beep+0x2e>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	2f 5f       	subi	r18, 0xFF	; 255
 21c:	3f 4f       	sbci	r19, 0xFF	; 255
 21e:	82 17       	cp	r24, r18
 220:	93 07       	cpc	r25, r19
 222:	d9 f7       	brne	.-10     	; 0x21a <beep+0x10>
 224:	0b c0       	rjmp	.+22     	; 0x23c <beep+0x32>
		cbi(PORTB,0);
		for(int j=0;j<freq;j++);
 226:	2f 5f       	subi	r18, 0xFF	; 255
 228:	3f 4f       	sbci	r19, 0xFF	; 255
 22a:	82 17       	cp	r24, r18
 22c:	93 07       	cpc	r25, r19
 22e:	d9 f7       	brne	.-10     	; 0x226 <beep+0x1c>
#include "avrlibdefs.h"

void beep(int freq, int t)
{
	sbi(DDRB,0);// Speaker
	while (t--)
 230:	61 50       	subi	r22, 0x01	; 1
 232:	71 09       	sbc	r23, r1
 234:	60 f7       	brcc	.-40     	; 0x20e <beep+0x4>
 236:	08 95       	ret
	{
		sbi(PORTB,0); // _-_-_-_-
		for(int j=0;j<freq;j++);
		cbi(PORTB,0);
 238:	c0 98       	cbi	0x18, 0	; 24
 23a:	fa cf       	rjmp	.-12     	; 0x230 <beep+0x26>
 23c:	c0 98       	cbi	0x18, 0	; 24
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	f1 cf       	rjmp	.-30     	; 0x226 <beep+0x1c>

00000244 <main>:


int main(void)
{
    /* Replace with your application code */
	lcdInit();
 244:	bd df       	rcall	.-134    	; 0x1c0 <lcdInit>
	rprintfInit(lcdDataWrite);
 246:	8b ea       	ldi	r24, 0xAB	; 171
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	52 d0       	rcall	.+164    	; 0x2f0 <rprintfInit>

	for (int i=10;i>=0;i--)
 24c:	ca e0       	ldi	r28, 0x0A	; 10
 24e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		lcdClear();
		lcdGotoXY(7,0);
		rprintf("%d",i);
 250:	00 e4       	ldi	r16, 0x40	; 64
 252:	10 e0       	ldi	r17, 0x00	; 0
 254:	ff 24       	eor	r15, r15
 256:	f3 94       	inc	r15
	lcdInit();
	rprintfInit(lcdDataWrite);

	for (int i=10;i>=0;i--)
	{
		lcdClear();
 258:	c7 df       	rcall	.-114    	; 0x1e8 <lcdClear>
		lcdGotoXY(7,0);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	87 e0       	ldi	r24, 0x07	; 7
 25e:	c7 df       	rcall	.-114    	; 0x1ee <lcdGotoXY>
		rprintf("%d",i);
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	1f 93       	push	r17
 266:	0f 93       	push	r16
 268:	ff 92       	push	r15
 26a:	61 d0       	rcall	.+194    	; 0x32e <rprintf1RamRom>
		beep(100,80);
 26c:	60 e5       	ldi	r22, 0x50	; 80
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	84 e6       	ldi	r24, 0x64	; 100
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ca df       	rcall	.-108    	; 0x20a <beep>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	9f e3       	ldi	r25, 0x3F	; 63
 278:	2d e0       	ldi	r18, 0x0D	; 13
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	91 50       	subi	r25, 0x01	; 1
 27e:	20 40       	sbci	r18, 0x00	; 0
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	e1 f7       	brne	.-8      	; 0x27c <main+0x38>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x42>
 286:	00 00       	nop
{
    /* Replace with your application code */
	lcdInit();
	rprintfInit(lcdDataWrite);

	for (int i=10;i>=0;i--)
 288:	21 97       	sbiw	r28, 0x01	; 1
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	cf 3f       	cpi	r28, 0xFF	; 255
 296:	9f ef       	ldi	r25, 0xFF	; 255
 298:	d9 07       	cpc	r29, r25
 29a:	f1 f6       	brne	.-68     	; 0x258 <main+0x14>
		rprintf("%d",i);
		beep(100,80);
		_delay_ms(1000);
	}

	beep(200,80);
 29c:	60 e5       	ldi	r22, 0x50	; 80
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	88 ec       	ldi	r24, 0xC8	; 200
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	b2 df       	rcall	.-156    	; 0x20a <beep>
	beep(100,160);
 2a6:	60 ea       	ldi	r22, 0xA0	; 160
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	84 e6       	ldi	r24, 0x64	; 100
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	ad df       	rcall	.-166    	; 0x20a <beep>
	beep(50,320);
 2b0:	60 e4       	ldi	r22, 0x40	; 64
 2b2:	71 e0       	ldi	r23, 0x01	; 1
 2b4:	82 e3       	ldi	r24, 0x32	; 50
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	a8 df       	rcall	.-176    	; 0x20a <beep>

	lcdClear();
 2ba:	96 df       	rcall	.-212    	; 0x1e8 <lcdClear>
	lcdGotoXY(4,0);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	96 df       	rcall	.-212    	; 0x1ee <lcdGotoXY>
	rprintf("FaraDars");
 2c2:	87 e3       	ldi	r24, 0x37	; 55
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	9f 93       	push	r25
 2c8:	8f 93       	push	r24
 2ca:	c1 e0       	ldi	r28, 0x01	; 1
 2cc:	cf 93       	push	r28
 2ce:	2f d0       	rcall	.+94     	; 0x32e <rprintf1RamRom>
	lcdGotoXY(0,1);
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	8c df       	rcall	.-232    	; 0x1ee <lcdGotoXY>
	rprintf("HD44780 2x16 LCD");
 2d6:	86 e2       	ldi	r24, 0x26	; 38
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	9f 93       	push	r25
 2dc:	8f 93       	push	r24
 2de:	cf 93       	push	r28
 2e0:	26 d0       	rcall	.+76     	; 0x32e <rprintf1RamRom>
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <main+0xaa>

000002f0 <rprintfInit>:
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
	}
}
 2f0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2f8:	08 95       	ret

000002fa <rprintfChar>:
 2fa:	cf 93       	push	r28
 2fc:	c8 2f       	mov	r28, r24
 2fe:	8a 30       	cpi	r24, 0x0A	; 10
 300:	31 f4       	brne	.+12     	; 0x30e <rprintfChar+0x14>
 302:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 306:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 30a:	8d e0       	ldi	r24, 0x0D	; 13
 30c:	09 95       	icall
 30e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 312:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 316:	8c 2f       	mov	r24, r28
 318:	09 95       	icall
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <rprintfu04>:
 31e:	8f 70       	andi	r24, 0x0F	; 15
 320:	e8 2f       	mov	r30, r24
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	ed 5b       	subi	r30, 0xBD	; 189
 326:	ff 4f       	sbci	r31, 0xFF	; 255
 328:	84 91       	lpm	r24, Z
 32a:	e7 df       	rcall	.-50     	; 0x2fa <rprintfChar>
 32c:	08 95       	ret

0000032e <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
 32e:	2f 92       	push	r2
 330:	3f 92       	push	r3
 332:	4f 92       	push	r4
 334:	5f 92       	push	r5
 336:	6f 92       	push	r6
 338:	7f 92       	push	r7
 33a:	8f 92       	push	r8
 33c:	9f 92       	push	r9
 33e:	af 92       	push	r10
 340:	bf 92       	push	r11
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	7d 88       	ldd	r7, Y+21	; 0x15
 358:	ce 88       	ldd	r12, Y+22	; 0x16
 35a:	df 88       	ldd	r13, Y+23	; 0x17
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
 35c:	4e 01       	movw	r8, r28
 35e:	28 e1       	ldi	r18, 0x18	; 24
 360:	82 0e       	add	r8, r18
 362:	91 1c       	adc	r9, r1

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 364:	51 2c       	mov	r5, r1
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 366:	61 2c       	mov	r6, r1
 368:	41 2c       	mov	r4, r1
 36a:	05 c0       	rjmp	.+10     	; 0x376 <rprintf1RamRom+0x48>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
 36c:	88 23       	and	r24, r24
 36e:	09 f4       	brne	.+2      	; 0x372 <rprintf1RamRom+0x44>
 370:	86 c0       	rjmp	.+268    	; 0x47e <__stack+0x1f>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
 372:	c3 df       	rcall	.-122    	; 0x2fa <rprintfChar>
 374:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
 376:	77 20       	and	r7, r7
 378:	41 f0       	breq	.+16     	; 0x38a <rprintf1RamRom+0x5c>
 37a:	86 01       	movw	r16, r12
 37c:	0f 5f       	subi	r16, 0xFF	; 255
 37e:	1f 4f       	sbci	r17, 0xFF	; 255
 380:	f6 01       	movw	r30, r12
 382:	84 91       	lpm	r24, Z
 384:	85 32       	cpi	r24, 0x25	; 37
 386:	91 f7       	brne	.-28     	; 0x36c <rprintf1RamRom+0x3e>
 388:	08 c0       	rjmp	.+16     	; 0x39a <rprintf1RamRom+0x6c>
 38a:	f6 01       	movw	r30, r12
 38c:	80 81       	ld	r24, Z
 38e:	85 32       	cpi	r24, 0x25	; 37
 390:	51 f0       	breq	.+20     	; 0x3a6 <rprintf1RamRom+0x78>
 392:	86 01       	movw	r16, r12
 394:	0f 5f       	subi	r16, 0xFF	; 255
 396:	1f 4f       	sbci	r17, 0xFF	; 255
 398:	e9 cf       	rjmp	.-46     	; 0x36c <rprintf1RamRom+0x3e>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
 39a:	f2 e0       	ldi	r31, 0x02	; 2
 39c:	cf 0e       	add	r12, r31
 39e:	d1 1c       	adc	r13, r1
 3a0:	f8 01       	movw	r30, r16
 3a2:	84 91       	lpm	r24, Z
 3a4:	06 c0       	rjmp	.+12     	; 0x3b2 <rprintf1RamRom+0x84>
 3a6:	f6 01       	movw	r30, r12
 3a8:	81 81       	ldd	r24, Z+1	; 0x01
 3aa:	96 01       	movw	r18, r12
 3ac:	2e 5f       	subi	r18, 0xFE	; 254
 3ae:	3f 4f       	sbci	r19, 0xFF	; 255
 3b0:	69 01       	movw	r12, r18
 3b2:	84 36       	cpi	r24, 0x64	; 100
 3b4:	69 f0       	breq	.+26     	; 0x3d0 <rprintf1RamRom+0xa2>
 3b6:	88 37       	cpi	r24, 0x78	; 120
 3b8:	09 f4       	brne	.+2      	; 0x3bc <rprintf1RamRom+0x8e>
 3ba:	53 c0       	rjmp	.+166    	; 0x462 <__stack+0x3>
 3bc:	83 36       	cpi	r24, 0x63	; 99
 3be:	31 f4       	brne	.+12     	; 0x3cc <rprintf1RamRom+0x9e>
		{
			case 'c': format_flag = va_arg(ap,int);
 3c0:	f4 01       	movw	r30, r8
 3c2:	80 81       	ld	r24, Z
 3c4:	94 01       	movw	r18, r8
 3c6:	2e 5f       	subi	r18, 0xFE	; 254
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	49 01       	movw	r8, r18
			default:  rprintfChar(format_flag); continue;
 3cc:	96 df       	rcall	.-212    	; 0x2fa <rprintfChar>
 3ce:	d3 cf       	rjmp	.-90     	; 0x376 <rprintf1RamRom+0x48>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 3d0:	f4 01       	movw	r30, r8
 3d2:	e0 80       	ld	r14, Z
 3d4:	f1 80       	ldd	r15, Z+1	; 0x01
 3d6:	32 e0       	ldi	r19, 0x02	; 2
 3d8:	83 0e       	add	r8, r19
 3da:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
 3dc:	ff 20       	and	r15, r15
 3de:	2c f4       	brge	.+10     	; 0x3ea <rprintf1RamRom+0xbc>
				{
					u_val = - u_val;
 3e0:	f1 94       	neg	r15
 3e2:	e1 94       	neg	r14
 3e4:	f1 08       	sbc	r15, r1
					rprintfChar('-');
 3e6:	8d e2       	ldi	r24, 0x2D	; 45
 3e8:	88 df       	rcall	.-240    	; 0x2fa <rprintfChar>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
 3ea:	80 e1       	ldi	r24, 0x10	; 16
 3ec:	e8 16       	cp	r14, r24
 3ee:	87 e2       	ldi	r24, 0x27	; 39
 3f0:	f8 06       	cpc	r15, r24
 3f2:	c8 f4       	brcc	.+50     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3f4:	00 e1       	ldi	r16, 0x10	; 16
 3f6:	17 e2       	ldi	r17, 0x27	; 39
 3f8:	98 01       	movw	r18, r16
 3fa:	ad ec       	ldi	r26, 0xCD	; 205
 3fc:	bc ec       	ldi	r27, 0xCC	; 204
 3fe:	68 d0       	rcall	.+208    	; 0x4d0 <__umulhisi3>
 400:	8c 01       	movw	r16, r24
 402:	16 95       	lsr	r17
 404:	07 95       	ror	r16
 406:	16 95       	lsr	r17
 408:	07 95       	ror	r16
 40a:	16 95       	lsr	r17
 40c:	07 95       	ror	r16
 40e:	02 30       	cpi	r16, 0x02	; 2
 410:	11 05       	cpc	r17, r1
 412:	88 f0       	brcs	.+34     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 414:	e0 16       	cp	r14, r16
 416:	f1 06       	cpc	r15, r17
 418:	78 f3       	brcs	.-34     	; 0x3f8 <rprintf1RamRom+0xca>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
 41a:	0f 2e       	mov	r0, r31
 41c:	fa e0       	ldi	r31, 0x0A	; 10
 41e:	2f 2e       	mov	r2, r31
 420:	f0 2d       	mov	r31, r0
 422:	35 2c       	mov	r3, r5
 424:	0d c0       	rjmp	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 426:	0f 2e       	mov	r0, r31
 428:	fa e0       	ldi	r31, 0x0A	; 10
 42a:	2f 2e       	mov	r2, r31
 42c:	f0 2d       	mov	r31, r0
 42e:	35 2c       	mov	r3, r5
 430:	00 e1       	ldi	r16, 0x10	; 16
 432:	17 e2       	ldi	r17, 0x27	; 39
 434:	05 c0       	rjmp	.+10     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 436:	0f 2e       	mov	r0, r31
 438:	fa e0       	ldi	r31, 0x0A	; 10
 43a:	2f 2e       	mov	r2, r31
 43c:	f0 2d       	mov	r31, r0
 43e:	35 2c       	mov	r3, r5
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
 440:	c7 01       	movw	r24, r14
 442:	b8 01       	movw	r22, r16
 444:	31 d0       	rcall	.+98     	; 0x4a8 <__udivmodhi4>
 446:	a8 2e       	mov	r10, r24
 448:	b9 2e       	mov	r11, r25
 44a:	86 2f       	mov	r24, r22
 44c:	68 df       	rcall	.-304    	; 0x31e <rprintfu04>
				u_val %= div_val;
 44e:	ea 2c       	mov	r14, r10
 450:	fb 2c       	mov	r15, r11
				div_val /= base;
 452:	c8 01       	movw	r24, r16
 454:	62 2d       	mov	r22, r2
 456:	73 2d       	mov	r23, r3
 458:	27 d0       	rcall	.+78     	; 0x4a8 <__udivmodhi4>
 45a:	8b 01       	movw	r16, r22
			} while (div_val);
 45c:	67 2b       	or	r22, r23
 45e:	81 f7       	brne	.-32     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 460:	8a cf       	rjmp	.-236    	; 0x376 <rprintf1RamRom+0x48>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
 462:	f4 01       	movw	r30, r8
 464:	e0 80       	ld	r14, Z
 466:	f1 80       	ldd	r15, Z+1	; 0x01
 468:	94 01       	movw	r18, r8
 46a:	2e 5f       	subi	r18, 0xFE	; 254
 46c:	3f 4f       	sbci	r19, 0xFF	; 255
 46e:	49 01       	movw	r8, r18
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
 470:	68 94       	set
 472:	22 24       	eor	r2, r2
 474:	24 f8       	bld	r2, 4
 476:	36 2c       	mov	r3, r6
 478:	04 2d       	mov	r16, r4
 47a:	10 e1       	ldi	r17, 0x10	; 16
 47c:	e1 cf       	rjmp	.-62     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	cf 90       	pop	r12
 492:	bf 90       	pop	r11
 494:	af 90       	pop	r10
 496:	9f 90       	pop	r9
 498:	8f 90       	pop	r8
 49a:	7f 90       	pop	r7
 49c:	6f 90       	pop	r6
 49e:	5f 90       	pop	r5
 4a0:	4f 90       	pop	r4
 4a2:	3f 90       	pop	r3
 4a4:	2f 90       	pop	r2
 4a6:	08 95       	ret

000004a8 <__udivmodhi4>:
 4a8:	aa 1b       	sub	r26, r26
 4aa:	bb 1b       	sub	r27, r27
 4ac:	51 e1       	ldi	r21, 0x11	; 17
 4ae:	07 c0       	rjmp	.+14     	; 0x4be <__udivmodhi4_ep>

000004b0 <__udivmodhi4_loop>:
 4b0:	aa 1f       	adc	r26, r26
 4b2:	bb 1f       	adc	r27, r27
 4b4:	a6 17       	cp	r26, r22
 4b6:	b7 07       	cpc	r27, r23
 4b8:	10 f0       	brcs	.+4      	; 0x4be <__udivmodhi4_ep>
 4ba:	a6 1b       	sub	r26, r22
 4bc:	b7 0b       	sbc	r27, r23

000004be <__udivmodhi4_ep>:
 4be:	88 1f       	adc	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	5a 95       	dec	r21
 4c4:	a9 f7       	brne	.-22     	; 0x4b0 <__udivmodhi4_loop>
 4c6:	80 95       	com	r24
 4c8:	90 95       	com	r25
 4ca:	bc 01       	movw	r22, r24
 4cc:	cd 01       	movw	r24, r26
 4ce:	08 95       	ret

000004d0 <__umulhisi3>:
 4d0:	a2 9f       	mul	r26, r18
 4d2:	b0 01       	movw	r22, r0
 4d4:	b3 9f       	mul	r27, r19
 4d6:	c0 01       	movw	r24, r0
 4d8:	a3 9f       	mul	r26, r19
 4da:	01 d0       	rcall	.+2      	; 0x4de <__umulhisi3+0xe>
 4dc:	b2 9f       	mul	r27, r18
 4de:	70 0d       	add	r23, r0
 4e0:	81 1d       	adc	r24, r1
 4e2:	11 24       	eor	r1, r1
 4e4:	91 1d       	adc	r25, r1
 4e6:	08 95       	ret

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
