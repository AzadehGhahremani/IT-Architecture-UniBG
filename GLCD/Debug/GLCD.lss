
GLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001270  00001304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006a  0080006a  0000130e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c44  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ada  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fbc  00000000  00000000  00003c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  00004be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ef  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c30  00000000  00000000  000057ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000741f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c5       	rjmp	.+2630   	; 0xa48 <__ctors_end>
       2:	3d c5       	rjmp	.+2682   	; 0xa7e <__bad_interrupt>
       4:	3c c5       	rjmp	.+2680   	; 0xa7e <__bad_interrupt>
       6:	3b c5       	rjmp	.+2678   	; 0xa7e <__bad_interrupt>
       8:	3a c5       	rjmp	.+2676   	; 0xa7e <__bad_interrupt>
       a:	39 c5       	rjmp	.+2674   	; 0xa7e <__bad_interrupt>
       c:	38 c5       	rjmp	.+2672   	; 0xa7e <__bad_interrupt>
       e:	37 c5       	rjmp	.+2670   	; 0xa7e <__bad_interrupt>
      10:	36 c5       	rjmp	.+2668   	; 0xa7e <__bad_interrupt>
      12:	35 c5       	rjmp	.+2666   	; 0xa7e <__bad_interrupt>
      14:	34 c5       	rjmp	.+2664   	; 0xa7e <__bad_interrupt>
      16:	33 c5       	rjmp	.+2662   	; 0xa7e <__bad_interrupt>
      18:	32 c5       	rjmp	.+2660   	; 0xa7e <__bad_interrupt>
      1a:	31 c5       	rjmp	.+2658   	; 0xa7e <__bad_interrupt>
      1c:	30 c5       	rjmp	.+2656   	; 0xa7e <__bad_interrupt>
      1e:	2f c5       	rjmp	.+2654   	; 0xa7e <__bad_interrupt>
      20:	2e c5       	rjmp	.+2652   	; 0xa7e <__bad_interrupt>
      22:	2d c5       	rjmp	.+2650   	; 0xa7e <__bad_interrupt>
      24:	2c c5       	rjmp	.+2648   	; 0xa7e <__bad_interrupt>
      26:	b9 c7       	rjmp	.+3954   	; 0xf9a <main+0x42>
      28:	c6 c7       	rjmp	.+3980   	; 0xfb6 <main+0x5e>
      2a:	cb c7       	rjmp	.+3990   	; 0xfc2 <main+0x6a>
      2c:	cf c7       	rjmp	.+3998   	; 0xfcc <main+0x74>
      2e:	d7 c7       	rjmp	.+4014   	; 0xfde <main+0x86>
      30:	de c7       	rjmp	.+4028   	; 0xfee <main+0x96>
      32:	e8 c7       	rjmp	.+4048   	; 0x1004 <main+0xac>

00000034 <__trampolines_end>:
      34:	0b 3e       	cpi	r16, 0xEB	; 235
      36:	41 41       	sbci	r20, 0x11	; 17
      38:	41 41       	sbci	r20, 0x11	; 17
      3a:	42 42       	sbci	r20, 0x22	; 34
      3c:	42 42       	sbci	r20, 0x22	; 34
      3e:	3c 00       	.word	0x003c	; ????
      40:	06 ff       	sbrs	r16, 6
      42:	ff ff       	.word	0xffff	; ????
      44:	ff ff       	.word	0xffff	; ????
      46:	ff 00       	Address 0x00000046 is out of bounds.
.word	0xffff	; ????

00000047 <Font5x7>:
      47:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      57:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      67:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      77:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
      87:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      97:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      a7:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      b7:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      c7:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
      d7:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
      e7:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
      f7:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     107:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     117:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     127:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     137:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     147:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     157:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     167:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     177:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     187:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     197:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1a7:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     1b7:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     1c7:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1d7:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     1e7:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     1f7:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     207:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     217:	00 00 41 36 08 00 08 08 2a 1c 08 08 1c 2a 08 08     ..A6....*....*..

00000227 <__c.1973>:
     227:	47 4c 43 44 20 54 65 73 74 20 6a 3d 25 64 00        GLCD Test j=%d.

00000236 <faradars>:
     236:	ff 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     246:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     256:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     266:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     276:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     286:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     296:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     2a6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 ff     ................
     2b6:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     302:	80 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     332:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     34e:	00 80 80 80 80 80 00 00 00 80 80 c0 c0 80 00 00     ................
     35e:	80 80 c0 c0 c0 00 00 00 00 00 00 00 80 c0 c0 80     ................
     36e:	00 00 00 00 00 00 80 c0 c0 80 00 00 00 00 00 00     ................
     37e:	00 00 00 03 ff ff ff ff f0 00 00 00 00 00 80 c0     ................
     38e:	c0 80 00 00 00 00 00 00 00 00 00 8f cf cf cf cf     ................
     39e:	c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3ae:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
     3be:	00 00 00 00 00 00 e0 f0 f8 f8 78 10 00 00 00 00     ..........x.....
     3ce:	00 00 1f ff ff ff ff f0 00 0f ff ff ff ff f8 00     ................
     3de:	00 07 1f ff ff fe f8 c0 00 00 00 00 03 1f ff ff     ................
     3ee:	fc f0 80 00 00 03 07 1f 3f 7f fe fc f8 e0 c0 80     ........?.......
     3fe:	00 00 00 00 03 ff ff ff ff f8 00 00 00 00 03 1f     ................
     40e:	7f ff fc f0 80 00 00 00 00 7c ff ff ff ff c7 c3     .........|......
     41e:	c7 cf ff fe fc f8 e0 00 00 00 00 00 00 00 00 00     ................
     42e:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
     43e:	00 00 00 00 fc ff ff ff ff c3 80 80 80 80 80 80     ................
     44e:	80 c0 c0 e3 ff ff ff 7f 3e 3c 3c 3f 3f 1f 1f 3f     ........><<??..?
     45e:	3e 3c 3e 3f 3f 1f 0f 07 00 00 00 00 00 c0 ff ff     ><>??...........
     46e:	ff ff 3f 00 3c 3c 3c 3c 3c 3c 3d 3f 3f 3f 1f 0f     ..?.<<<<<<=???..
     47e:	00 00 00 00 00 3f 3f 3f 3f 3f 00 00 00 00 00 80     .....?????......
     48e:	e0 ff ff ff 3f 3e 3c 3c 3c 3c 3c 3d 3d 3f 3f 3f     ....?><<<<<==???
     49e:	3f 3f 3f 3f 1f 1f 0f 03 00 00 00 00 00 00 00 00     ????............
     4ae:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
     4be:	00 00 00 00 00 01 03 07 07 07 07 07 07 07 07 07     ................
     4ce:	07 03 03 03 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     4e6:	00 00 00 04 0f 1f 1f 0f 07 01 00 00 00 00 00 00     ................
	...
     50a:	00 04 0e 1f 1f 0f 07 01 00 00 00 00 00 00 00 00     ................
	...
     532:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     5b2:	00 00 00 ff ff 80 80 80 80 80 80 80 80 80 80 80     ................
     5c2:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     5d2:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     5e2:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     5f2:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     602:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     612:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     622:	80 80 80 80 80 80 80 80 80 80 80 80 80 80 80 80     ................
     632:	80 80 80 ff                                         ....

00000636 <logo>:
	...
     64a:	00 00 80 c0 40 40 40 40 c0 80 40 40 40 40 40 c0     ....@@@@..@@@@@.
     65a:	00 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     68e:	80 80 80 80 80 40 40 40 40 40 c0 00 c0 40 40 40     .....@@@@@...@@@
     69e:	40 c0 80 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
	...
     6c6:	00 00 00 c0 70 1e 11 00 04 c4 3c 06 05 07 08 08     ....p.....<.....
     6d6:	08 08 08 07 0f 10 10 10 11 11 1f 20 7e 42 c4 84     ........... ~B..
     6e6:	88 f8 00 f0 30 20 40 c0 80 00 00 00 00 00 00 00     ....0 @.........
	...
     6fe:	80 40 60 20 10 f0 f0 88 8c 84 44 42 7e 07 19 11     .@` ......DB~...
     70e:	10 10 10 13 0c 0f 78 90 08 10 10 07 33 c4 74 94     ......x.....3.t.
     71e:	14 14 1b 1c 70 80 00 00 00 00 00 00 00 00 00 00     ....p...........
	...
     746:	e0 98 84 87 81 83 e2 32 0f 01 00 00 00 00 00 00     .......2........
     756:	00 f0 88 88 08 08 10 10 70 80 20 20 20 40 40 80     ........p.   @@.
     766:	80 00 00 03 06 04 08 18 1f 80 be c2 cc 88 10 f0     ................
     776:	00 f0 18 88 c4 e2 b2 13 10 08 0c 04 06 03 00 00     ................
     786:	80 c0 40 40 20 20 a0 20 70 10 18 08 88 88 98 e1     ..@@  . p.......
     796:	02 01 01 00 01 01 00 01 1e 32 a2 a3 a5 a5 ac b0     .........2......
     7a6:	80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     7c2:	c0 60 2c 2b 28 30 30 a8 e8 0e 01 00 00 00 00 00     .`,+(00.........
     7d2:	00 00 80 40 40 40 80 80 81 01 01 01 01 03 06 04     ...@@@..........
     7e2:	0c 08 08 08 0f d4 61 a2 c2 c4 8c d8 00 e7 38 71     ......a.......8q
     7f2:	f3 e3 c7 fb 00 ff c7 e3 71 30 2f c0 00 00 00 00     ........q0/.....
     802:	00 00 00 00 0f e8 18 18 14 0c 0a 9b a1 1d 45 c3     ..............E.
     812:	c3 a2 a2 63 3e c0 00 00 00 00 00 00 00 00 03 0c     ...c>...........
     822:	e8 20 30 30 29 2f 28 e0 80 00 00 00 00 00 00 00     . 00)/(.........
	...
     83e:	00 00 f0 48 47 44 44 44 44 64 1e 03 00 00 00 00     ...HGDDDDd......
     84e:	00 00 00 00 c0 30 0f 18 18 28 30 30 e0 1f 80 be     .....0...(00....
     85e:	a2 c2 c2 44 84 88 f8 00 f6 1d 38 30 71 61 a2 3f     ...D......80qa.?
     86e:	00 fb 0e 1c 38 30 71 be 00 ff 71 30 18 1c 8e f9     ....80q...q0....
	...
     886:	00 03 fa 8e 87 45 43 62 22 3c 03 1d 10 10 10 08     .....ECb"<......
     896:	08 08 0f 00 10 f8 08 88 88 88 88 88 b8 63 3c 44     .............c<D
     8a6:	44 44 44 44 47 58 60 00 00 00 00 00 00 00 00 00     DDDDGX`.........
     8b6:	00 00 00 00 00 00 00 18 16 11 11 11 11 11 11 1d     ................
     8c6:	07 1c 13 21 21 21 22 42 42 7a 04 78 45 85 86 86     ...!!!"BBz.xE...
     8d6:	8a 0a 0c f4 87 74 3b 28 30 30 51 61 e3 36 00 54     .....t;(00Qa.6.T
     8e6:	87 8a 0e 1c 1c 38 f0 07 98 be c3 c7 8e 1c 18 ef     .....8..........
     8f6:	00 ff 1c 0c 8e 45 e3 be 00 00 00 00 00 00 00 00     .....E..........
     906:	00 00 00 80 c0 40 40 20 20 30 10 f0 10 f8 08 08     .....@@  0......
     916:	88 84 84 44 4c 70 0f 32 20 23 20 21 21 11 16 18     ...DLp.2 # !!...
     926:	07 19 11 11 11 11 11 13 1e 00 00 00 00 00 00 00     ................
	...
     956:	00 01 01 01 01 02 02 04 04 04 08 08 0f 00 1f 31     ...............1
     966:	21 62 43 45 8e 8a f5 00 ef 38 71 71 e3 c7 ce fb     !bCE.....8qq....
     976:	00 fb c7 c3 e3 51 30 38 ef 00 f8 88 84 44 42 22     .....Q08.....DB"
     986:	21 37 18 07 08 08 08 04 04 06 02 03 00 01 01 01     !7..............
	...
     9ee:	03 04 04 08 18 11 33 3e 00 3e 31 10 18 08 04 06     ......3>.>1.....
     9fe:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000a36 <HexChars>:
     a36:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000a48 <__ctors_end>:
     a48:	11 24       	eor	r1, r1
     a4a:	1f be       	out	0x3f, r1	; 63
     a4c:	cf e5       	ldi	r28, 0x5F	; 95
     a4e:	d4 e0       	ldi	r29, 0x04	; 4
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	cd bf       	out	0x3d, r28	; 61

00000a54 <__do_copy_data>:
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	a0 e6       	ldi	r26, 0x60	; 96
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e0 e7       	ldi	r30, 0x70	; 112
     a5c:	f2 e1       	ldi	r31, 0x12	; 18
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <__do_copy_data+0x10>
     a60:	05 90       	lpm	r0, Z+
     a62:	0d 92       	st	X+, r0
     a64:	aa 36       	cpi	r26, 0x6A	; 106
     a66:	b1 07       	cpc	r27, r17
     a68:	d9 f7       	brne	.-10     	; 0xa60 <__do_copy_data+0xc>

00000a6a <__do_clear_bss>:
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	aa e6       	ldi	r26, 0x6A	; 106
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <.do_clear_bss_start>

00000a72 <.do_clear_bss_loop>:
     a72:	1d 92       	st	X+, r1

00000a74 <.do_clear_bss_start>:
     a74:	a2 37       	cpi	r26, 0x72	; 114
     a76:	b2 07       	cpc	r27, r18
     a78:	e1 f7       	brne	.-8      	; 0xa72 <.do_clear_bss_loop>
     a7a:	6e d2       	rcall	.+1244   	; 0xf58 <main>
     a7c:	f7 c3       	rjmp	.+2030   	; 0x126c <_exit>

00000a7e <__bad_interrupt>:
     a7e:	c0 ca       	rjmp	.-2688   	; 0x0 <__vectors>

00000a80 <glcdSetDot>:
	glcdStartLine(0);
}

// draw line
void glcdLine(u08 x1, u08 y1, u08 x2, u08 y2)
{
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	d8 2f       	mov	r29, r24
     a8a:	c6 2f       	mov	r28, r22
     a8c:	16 2f       	mov	r17, r22
     a8e:	16 95       	lsr	r17
     a90:	16 95       	lsr	r17
     a92:	16 95       	lsr	r17
     a94:	61 2f       	mov	r22, r17
     a96:	26 d2       	rcall	.+1100   	; 0xee4 <glcdSetAddress>
     a98:	df d1       	rcall	.+958    	; 0xe58 <glcdDataRead>
     a9a:	de d1       	rcall	.+956    	; 0xe58 <glcdDataRead>
     a9c:	08 2f       	mov	r16, r24
     a9e:	61 2f       	mov	r22, r17
     aa0:	8d 2f       	mov	r24, r29
     aa2:	20 d2       	rcall	.+1088   	; 0xee4 <glcdSetAddress>
     aa4:	c7 70       	andi	r28, 0x07	; 7
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <glcdSetDot+0x30>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	ca 95       	dec	r28
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <glcdSetDot+0x2c>
     ab4:	80 2b       	or	r24, r16
     ab6:	95 d1       	rcall	.+810    	; 0xde2 <glcdDataWrite>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	09 d2       	rcall	.+1042   	; 0xece <glcdStartLine>
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	08 95       	ret

00000ac6 <glcdRectangle>:
};

// draw rectangle
void glcdRectangle(u08 x, u08 y, u08 a, u08 b)
{
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	c8 2f       	mov	r28, r24
     ad6:	f6 2e       	mov	r15, r22
     ad8:	14 2f       	mov	r17, r20
     ada:	02 2f       	mov	r16, r18
  unsigned char j;

  for (j = 0; j < a; j++) {
     adc:	44 23       	and	r20, r20
     ade:	81 f0       	breq	.+32     	; 0xb00 <glcdRectangle+0x3a>
     ae0:	d4 2e       	mov	r13, r20
     ae2:	d6 0e       	add	r13, r22
     ae4:	d6 2f       	mov	r29, r22
		glcdSetDot(x, y + j);
		glcdSetDot(x + b - 1, y + j);
     ae6:	ee 24       	eor	r14, r14
     ae8:	ea 94       	dec	r14
     aea:	e2 0e       	add	r14, r18
     aec:	e8 0e       	add	r14, r24
void glcdRectangle(u08 x, u08 y, u08 a, u08 b)
{
  unsigned char j;

  for (j = 0; j < a; j++) {
		glcdSetDot(x, y + j);
     aee:	6d 2f       	mov	r22, r29
     af0:	8c 2f       	mov	r24, r28
     af2:	c6 df       	rcall	.-116    	; 0xa80 <glcdSetDot>
		glcdSetDot(x + b - 1, y + j);
     af4:	6d 2f       	mov	r22, r29
     af6:	8e 2d       	mov	r24, r14
     af8:	c3 df       	rcall	.-122    	; 0xa80 <glcdSetDot>
     afa:	df 5f       	subi	r29, 0xFF	; 255
// draw rectangle
void glcdRectangle(u08 x, u08 y, u08 a, u08 b)
{
  unsigned char j;

  for (j = 0; j < a; j++) {
     afc:	dd 12       	cpse	r13, r29
     afe:	f7 cf       	rjmp	.-18     	; 0xaee <glcdRectangle+0x28>
		glcdSetDot(x, y + j);
		glcdSetDot(x + b - 1, y + j);
	}
  for (j = 0; j < b; j++)	{
     b00:	00 23       	and	r16, r16
     b02:	69 f0       	breq	.+26     	; 0xb1e <glcdRectangle+0x58>
     b04:	0c 0f       	add	r16, r28
		glcdSetDot(x + j, y);
		glcdSetDot(x + j, y + a - 1);
     b06:	df ef       	ldi	r29, 0xFF	; 255
     b08:	df 0d       	add	r29, r15
     b0a:	d1 0f       	add	r29, r17
  for (j = 0; j < a; j++) {
		glcdSetDot(x, y + j);
		glcdSetDot(x + b - 1, y + j);
	}
  for (j = 0; j < b; j++)	{
		glcdSetDot(x + j, y);
     b0c:	6f 2d       	mov	r22, r15
     b0e:	8c 2f       	mov	r24, r28
     b10:	b7 df       	rcall	.-146    	; 0xa80 <glcdSetDot>
		glcdSetDot(x + j, y + a - 1);
     b12:	6d 2f       	mov	r22, r29
     b14:	8c 2f       	mov	r24, r28
     b16:	b4 df       	rcall	.-152    	; 0xa80 <glcdSetDot>
     b18:	cf 5f       	subi	r28, 0xFF	; 255

  for (j = 0; j < a; j++) {
		glcdSetDot(x, y + j);
		glcdSetDot(x + b - 1, y + j);
	}
  for (j = 0; j < b; j++)	{
     b1a:	0c 13       	cpse	r16, r28
     b1c:	f7 cf       	rjmp	.-18     	; 0xb0c <glcdRectangle+0x46>
		glcdSetDot(x + j, y);
		glcdSetDot(x + j, y + a - 1);
	}
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	08 95       	ret

00000b2e <glcdCircle>:

// draw circle
void glcdCircle(u08 xcenter, u08 ycenter, u08 radius)
{
     b2e:	4f 92       	push	r4
     b30:	5f 92       	push	r5
     b32:	6f 92       	push	r6
     b34:	7f 92       	push	r7
     b36:	8f 92       	push	r8
     b38:	9f 92       	push	r9
     b3a:	af 92       	push	r10
     b3c:	bf 92       	push	r11
     b3e:	cf 92       	push	r12
     b40:	df 92       	push	r13
     b42:	ef 92       	push	r14
     b44:	ff 92       	push	r15
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	66 2e       	mov	r6, r22
  int tswitch, y, x = 0;
  unsigned char d;

  d = ycenter - xcenter;
     b50:	46 2e       	mov	r4, r22
     b52:	48 1a       	sub	r4, r24
  y = radius;
     b54:	04 2f       	mov	r16, r20
     b56:	10 e0       	ldi	r17, 0x00	; 0
  tswitch = 3 - 2 * radius;
     b58:	98 01       	movw	r18, r16
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	43 e0       	ldi	r20, 0x03	; 3
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	6a 01       	movw	r12, r20
     b64:	c2 1a       	sub	r12, r18
     b66:	d3 0a       	sbc	r13, r19
     b68:	86 2e       	mov	r8, r22
     b6a:	96 2e       	mov	r9, r22
     b6c:	0f 2e       	mov	r0, r31
     b6e:	f6 e0       	ldi	r31, 0x06	; 6
     b70:	af 2e       	mov	r10, r31
     b72:	b1 2c       	mov	r11, r1
     b74:	f0 2d       	mov	r31, r0
     b76:	e1 2c       	mov	r14, r1
     b78:	f1 2c       	mov	r15, r1
     b7a:	58 2e       	mov	r5, r24
     b7c:	56 1a       	sub	r5, r22
  while (x <= y) {
    glcdSetDot(xcenter + x, ycenter + y);     glcdSetDot(xcenter + x, ycenter - y);
     b7e:	c6 2d       	mov	r28, r6
     b80:	c0 0f       	add	r28, r16
     b82:	6c 2f       	mov	r22, r28
     b84:	75 2c       	mov	r7, r5
     b86:	79 0c       	add	r7, r9
     b88:	87 2d       	mov	r24, r7
     b8a:	7a df       	rcall	.-268    	; 0xa80 <glcdSetDot>
     b8c:	d6 2d       	mov	r29, r6
     b8e:	d0 1b       	sub	r29, r16
     b90:	6d 2f       	mov	r22, r29
     b92:	87 2d       	mov	r24, r7
     b94:	75 df       	rcall	.-278    	; 0xa80 <glcdSetDot>
    glcdSetDot(xcenter - x, ycenter + y);     glcdSetDot(xcenter - x, ycenter - y);
     b96:	6c 2f       	mov	r22, r28
     b98:	78 2c       	mov	r7, r8
     b9a:	75 0c       	add	r7, r5
     b9c:	87 2d       	mov	r24, r7
     b9e:	70 df       	rcall	.-288    	; 0xa80 <glcdSetDot>
     ba0:	6d 2f       	mov	r22, r29
     ba2:	87 2d       	mov	r24, r7
     ba4:	6d df       	rcall	.-294    	; 0xa80 <glcdSetDot>
    glcdSetDot(ycenter + y - d, ycenter + x); glcdSetDot(ycenter + y - d, ycenter - x);
     ba6:	c4 19       	sub	r28, r4
     ba8:	69 2d       	mov	r22, r9
     baa:	8c 2f       	mov	r24, r28
     bac:	69 df       	rcall	.-302    	; 0xa80 <glcdSetDot>
     bae:	68 2d       	mov	r22, r8
     bb0:	8c 2f       	mov	r24, r28
     bb2:	66 df       	rcall	.-308    	; 0xa80 <glcdSetDot>
    glcdSetDot(ycenter - y - d, ycenter + x); glcdSetDot(ycenter - y - d, ycenter - x);
     bb4:	d4 19       	sub	r29, r4
     bb6:	69 2d       	mov	r22, r9
     bb8:	8d 2f       	mov	r24, r29
     bba:	62 df       	rcall	.-316    	; 0xa80 <glcdSetDot>
     bbc:	68 2d       	mov	r22, r8
     bbe:	8d 2f       	mov	r24, r29
     bc0:	5f df       	rcall	.-322    	; 0xa80 <glcdSetDot>

    if (tswitch < 0) tswitch += (4 * x + 6);
     bc2:	dd 20       	and	r13, r13
     bc4:	1c f4       	brge	.+6      	; 0xbcc <glcdCircle+0x9e>
     bc6:	ca 0c       	add	r12, r10
     bc8:	db 1c       	adc	r13, r11
     bca:	0c c0       	rjmp	.+24     	; 0xbe4 <glcdCircle+0xb6>
    else {
      tswitch += (4 * (x - y) + 10);
     bcc:	c7 01       	movw	r24, r14
     bce:	80 1b       	sub	r24, r16
     bd0:	91 0b       	sbc	r25, r17
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 96       	adiw	r24, 0x0a	; 10
     bdc:	c8 0e       	add	r12, r24
     bde:	d9 1e       	adc	r13, r25
      y--;
     be0:	01 50       	subi	r16, 0x01	; 1
     be2:	11 09       	sbc	r17, r1
    }
    x++;
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	e8 1a       	sub	r14, r24
     be8:	f8 0a       	sbc	r15, r24
     bea:	93 94       	inc	r9
     bec:	8a 94       	dec	r8
     bee:	84 e0       	ldi	r24, 0x04	; 4
     bf0:	a8 0e       	add	r10, r24
     bf2:	b1 1c       	adc	r11, r1
  unsigned char d;

  d = ycenter - xcenter;
  y = radius;
  tswitch = 3 - 2 * radius;
  while (x <= y) {
     bf4:	0e 15       	cp	r16, r14
     bf6:	1f 05       	cpc	r17, r15
     bf8:	14 f6       	brge	.-124    	; 0xb7e <glcdCircle+0x50>
      tswitch += (4 * (x - y) + 10);
      y--;
    }
    x++;
  }
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	bf 90       	pop	r11
     c0c:	af 90       	pop	r10
     c0e:	9f 90       	pop	r9
     c10:	8f 90       	pop	r8
     c12:	7f 90       	pop	r7
     c14:	6f 90       	pop	r6
     c16:	5f 90       	pop	r5
     c18:	4f 90       	pop	r4
     c1a:	08 95       	ret

00000c1c <glcdWriteChar>:

// text routines

// write a character at the current position
void glcdWriteChar(unsigned char c)
{
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	08 2f       	mov	r16, r24
     c26:	10 e0       	ldi	r17, 0x00	; 0
     c28:	00 52       	subi	r16, 0x20	; 32
     c2a:	11 09       	sbc	r17, r1
     c2c:	c8 01       	movw	r24, r16
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	08 0f       	add	r16, r24
     c38:	19 1f       	adc	r17, r25
     c3a:	e8 01       	movw	r28, r16
     c3c:	c9 5b       	subi	r28, 0xB9	; 185
     c3e:	df 4f       	sbci	r29, 0xFF	; 255
     c40:	04 5b       	subi	r16, 0xB4	; 180
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
	u08 i = 0;

	for(i=0; i<5; i++)
	{
		glcdDataWrite(pgm_read_byte(&Font5x7[((c - 0x20) * 5) + i]));
     c44:	fe 01       	movw	r30, r28
     c46:	84 91       	lpm	r24, Z
     c48:	cc d0       	rcall	.+408    	; 0xde2 <glcdDataWrite>
     c4a:	21 96       	adiw	r28, 0x01	; 1
// write a character at the current position
void glcdWriteChar(unsigned char c)
{
	u08 i = 0;

	for(i=0; i<5; i++)
     c4c:	c0 17       	cp	r28, r16
     c4e:	d1 07       	cpc	r29, r17
     c50:	c9 f7       	brne	.-14     	; 0xc44 <glcdWriteChar+0x28>
	{
		glcdDataWrite(pgm_read_byte(&Font5x7[((c - 0x20) * 5) + i]));
	}

	// write a spacer line
	glcdDataWrite(0x00);
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	c6 d0       	rcall	.+396    	; 0xde2 <glcdDataWrite>
	//else 
	//	glcdWriteData(0x00);

	//cbi(GLCD_Control, GLCD_CS1);
	//cbi(GLCD_Control, GLCD_CS2);
	glcdStartLine(0);
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	3a d1       	rcall	.+628    	; 0xece <glcdStartLine>
}
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	08 95       	ret

00000c64 <glcdWriteCharGr>:

void glcdWriteCharGr(u08 grCharIdx)
{
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
	u08 idx;
	u08 grLength;
	u08 grStartIdx = 0;

	// get starting index of graphic bitmap
	for(idx=0; idx<grCharIdx; idx++)
     c6c:	88 23       	and	r24, r24
     c6e:	61 f0       	breq	.+24     	; 0xc88 <glcdWriteCharGr+0x24>
     c70:	c0 e0       	ldi	r28, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
	{
		// add this graphic's length to the startIdx
		// to get the startIdx of the next one
		grStartIdx += pgm_read_byte(FontGr+grStartIdx);
     c74:	ec 2f       	mov	r30, r28
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	ec 5c       	subi	r30, 0xCC	; 204
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	e4 91       	lpm	r30, Z
     c7e:	ce 0f       	add	r28, r30
	u08 idx;
	u08 grLength;
	u08 grStartIdx = 0;

	// get starting index of graphic bitmap
	for(idx=0; idx<grCharIdx; idx++)
     c80:	9f 5f       	subi	r25, 0xFF	; 255
     c82:	89 13       	cpse	r24, r25
     c84:	f7 cf       	rjmp	.-18     	; 0xc74 <glcdWriteCharGr+0x10>
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <glcdWriteCharGr+0x26>

void glcdWriteCharGr(u08 grCharIdx)
{
	u08 idx;
	u08 grLength;
	u08 grStartIdx = 0;
     c88:	c0 e0       	ldi	r28, 0x00	; 0
	{
		// add this graphic's length to the startIdx
		// to get the startIdx of the next one
		grStartIdx += pgm_read_byte(FontGr+grStartIdx);
	}
	grLength = pgm_read_byte(FontGr+grStartIdx);
     c8a:	d0 e0       	ldi	r29, 0x00	; 0
     c8c:	fe 01       	movw	r30, r28
     c8e:	ec 5c       	subi	r30, 0xCC	; 204
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	04 91       	lpm	r16, Z

	// write the lines of the desired graphic to the display
	for(idx=0; idx<grLength; idx++)
     c94:	00 23       	and	r16, r16
     c96:	51 f0       	breq	.+20     	; 0xcac <glcdWriteCharGr+0x48>
     c98:	cb 5c       	subi	r28, 0xCB	; 203
     c9a:	df 4f       	sbci	r29, 0xFF	; 255
     c9c:	10 e0       	ldi	r17, 0x00	; 0
	{
		// write the line
		glcdDataWrite(pgm_read_byte(FontGr+(grStartIdx+1)+idx));
     c9e:	fe 01       	movw	r30, r28
     ca0:	84 91       	lpm	r24, Z
     ca2:	9f d0       	rcall	.+318    	; 0xde2 <glcdDataWrite>
		grStartIdx += pgm_read_byte(FontGr+grStartIdx);
	}
	grLength = pgm_read_byte(FontGr+grStartIdx);

	// write the lines of the desired graphic to the display
	for(idx=0; idx<grLength; idx++)
     ca4:	1f 5f       	subi	r17, 0xFF	; 255
     ca6:	21 96       	adiw	r28, 0x01	; 1
     ca8:	01 13       	cpse	r16, r17
     caa:	f9 cf       	rjmp	.-14     	; 0xc9e <glcdWriteCharGr+0x3a>
	{
		// write the line
		glcdDataWrite(pgm_read_byte(FontGr+(grStartIdx+1)+idx));
	}
}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	08 95       	ret

00000cb6 <glcdPutStr>:

void glcdPutStr(unsigned char *data)
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	ec 01       	movw	r28, r24
  while (*data) {
     cbc:	88 81       	ld	r24, Y
     cbe:	88 23       	and	r24, r24
     cc0:	29 f0       	breq	.+10     	; 0xccc <glcdPutStr+0x16>
     cc2:	21 96       	adiw	r28, 0x01	; 1
    glcdWriteChar(*data);
     cc4:	ab df       	rcall	.-170    	; 0xc1c <glcdWriteChar>
	}
}

void glcdPutStr(unsigned char *data)
{
  while (*data) {
     cc6:	89 91       	ld	r24, Y+
     cc8:	81 11       	cpse	r24, r1
     cca:	fc cf       	rjmp	.-8      	; 0xcc4 <glcdPutStr+0xe>
    glcdWriteChar(*data);
    data++;
  }
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <glcdInitHW>:
	glcdBusyWait(controller);		// wait until LCD not busy
	data = *(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller);
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	return data;
}
     cd2:	c0 98       	cbi	0x18, 0	; 24
     cd4:	c1 98       	cbi	0x18, 1	; 24
     cd6:	c2 98       	cbi	0x18, 2	; 24
     cd8:	c3 98       	cbi	0x18, 3	; 24
     cda:	c4 98       	cbi	0x18, 4	; 24
     cdc:	c6 98       	cbi	0x18, 6	; 24
     cde:	c7 98       	cbi	0x18, 7	; 24
     ce0:	c5 98       	cbi	0x18, 5	; 24
     ce2:	b8 9a       	sbi	0x17, 0	; 23
     ce4:	b9 9a       	sbi	0x17, 1	; 23
     ce6:	ba 9a       	sbi	0x17, 2	; 23
     ce8:	bb 9a       	sbi	0x17, 3	; 23
     cea:	bc 9a       	sbi	0x17, 4	; 23
     cec:	be 9a       	sbi	0x17, 6	; 23
     cee:	bf 9a       	sbi	0x17, 7	; 23
     cf0:	bd 9a       	sbi	0x17, 5	; 23
     cf2:	12 ba       	out	0x12, r1	; 18
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	81 bb       	out	0x11, r24	; 17
     cf8:	08 95       	ret

00000cfa <glcdControllerSelect>:
     cfa:	c3 98       	cbi	0x18, 3	; 24
     cfc:	c4 98       	cbi	0x18, 4	; 24
     cfe:	c6 98       	cbi	0x18, 6	; 24
     d00:	c7 98       	cbi	0x18, 7	; 24
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	41 f0       	breq	.+16     	; 0xd16 <glcdControllerSelect+0x1c>
     d06:	28 f0       	brcs	.+10     	; 0xd12 <glcdControllerSelect+0x18>
     d08:	82 30       	cpi	r24, 0x02	; 2
     d0a:	39 f0       	breq	.+14     	; 0xd1a <glcdControllerSelect+0x20>
     d0c:	83 30       	cpi	r24, 0x03	; 3
     d0e:	39 f0       	breq	.+14     	; 0xd1e <glcdControllerSelect+0x24>
     d10:	08 95       	ret
     d12:	c3 9a       	sbi	0x18, 3	; 24
     d14:	08 95       	ret
     d16:	c4 9a       	sbi	0x18, 4	; 24
     d18:	08 95       	ret
     d1a:	c6 9a       	sbi	0x18, 6	; 24
     d1c:	08 95       	ret
     d1e:	c7 9a       	sbi	0x18, 7	; 24
     d20:	08 95       	ret

00000d22 <glcdBusyWait>:
     d22:	f8 94       	cli
     d24:	ea df       	rcall	.-44     	; 0xcfa <glcdControllerSelect>
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	82 bb       	out	0x12, r24	; 18
     d2a:	c0 98       	cbi	0x18, 0	; 24
     d2c:	11 ba       	out	0x11, r1	; 17
     d2e:	c1 9a       	sbi	0x18, 1	; 24
     d30:	c2 9a       	sbi	0x18, 2	; 24
     d32:	00 00       	nop
     d34:	00 00       	nop
     d36:	87 9b       	sbis	0x10, 7	; 16
     d38:	0c c0       	rjmp	.+24     	; 0xd52 <glcdBusyWait+0x30>
     d3a:	c2 98       	cbi	0x18, 2	; 24
	...
     d44:	c2 9a       	sbi	0x18, 2	; 24
	...
     d4e:	87 99       	sbic	0x10, 7	; 16
     d50:	f4 cf       	rjmp	.-24     	; 0xd3a <glcdBusyWait+0x18>
     d52:	c2 98       	cbi	0x18, 2	; 24
     d54:	c1 98       	cbi	0x18, 1	; 24
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	81 bb       	out	0x11, r24	; 17
     d5a:	78 94       	sei
     d5c:	08 95       	ret

00000d5e <glcdControlWrite>:
     d5e:	cf 93       	push	r28
     d60:	c6 2f       	mov	r28, r22
     d62:	f8 94       	cli
     d64:	de df       	rcall	.-68     	; 0xd22 <glcdBusyWait>
     d66:	c0 98       	cbi	0x18, 0	; 24
     d68:	c1 98       	cbi	0x18, 1	; 24
     d6a:	c2 9a       	sbi	0x18, 2	; 24
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	81 bb       	out	0x11, r24	; 17
     d70:	c2 bb       	out	0x12, r28	; 18
	...
     d82:	c2 98       	cbi	0x18, 2	; 24
     d84:	78 94       	sei
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <glcdReset>:
void glcdReset(u08 resetState)
{
	// reset lcd if argument is true
	// run lcd if argument is false
#ifdef GLCD_PORT_INTERFACE
	if(resetState)
     d8a:	88 23       	and	r24, r24
     d8c:	11 f0       	breq	.+4      	; 0xd92 <glcdReset+0x8>
		cbi(GLCD_CTRL_PORT, GLCD_CTRL_RESET);
     d8e:	c5 98       	cbi	0x18, 5	; 24
     d90:	08 95       	ret
	else
		sbi(GLCD_CTRL_PORT, GLCD_CTRL_RESET);
     d92:	c5 9a       	sbi	0x18, 5	; 24
     d94:	08 95       	ret

00000d96 <glcdSetXAddress>:
#endif
}

void glcdSetXAddress(u08 xAddr)
{
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
	u08 i;
	// record address change locally
	GrLcdState.lcdXAddr = xAddr;
     d9a:	cc e6       	ldi	r28, 0x6C	; 108
     d9c:	d0 e0       	ldi	r29, 0x00	; 0
     d9e:	88 83       	st	Y, r24
	
	// clear y (col) address on all controllers
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_SET_Y_ADDR | 0x00);
     da0:	60 e4       	ldi	r22, 0x40	; 64
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	dc df       	rcall	.-72     	; 0xd5e <glcdControlWrite>
		GrLcdState.ctrlr[i].xAddr = 0;
     da6:	1a 82       	std	Y+2, r1	; 0x02
	GrLcdState.lcdXAddr = xAddr;
	
	// clear y (col) address on all controllers
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_SET_Y_ADDR | 0x00);
     da8:	60 e4       	ldi	r22, 0x40	; 64
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	d8 df       	rcall	.-80     	; 0xd5e <glcdControlWrite>
		GrLcdState.ctrlr[i].xAddr = 0;
     dae:	1c 82       	std	Y+4, r1	; 0x04
	}

	// set y (col) address on destination controller
	glcdControlWrite((GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS),
		GLCD_SET_Y_ADDR | (GrLcdState.lcdXAddr & 0x3F));
     db0:	88 81       	ld	r24, Y
		glcdControlWrite(i, GLCD_SET_Y_ADDR | 0x00);
		GrLcdState.ctrlr[i].xAddr = 0;
	}

	// set y (col) address on destination controller
	glcdControlWrite((GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS),
     db2:	68 2f       	mov	r22, r24
     db4:	6f 73       	andi	r22, 0x3F	; 63
     db6:	60 64       	ori	r22, 0x40	; 64
     db8:	82 95       	swap	r24
     dba:	86 95       	lsr	r24
     dbc:	86 95       	lsr	r24
     dbe:	83 70       	andi	r24, 0x03	; 3
     dc0:	ce df       	rcall	.-100    	; 0xd5e <glcdControlWrite>
		GLCD_SET_Y_ADDR | (GrLcdState.lcdXAddr & 0x3F));
}
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <glcdSetYAddress>:

void glcdSetYAddress(u08 yAddr)
{
     dc8:	cf 93       	push	r28
	u08 i;
	// record address change locally
	GrLcdState.lcdYAddr = yAddr;
     dca:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <GrLcdState+0x1>
	// set page address for all controllers
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_SET_PAGE | yAddr);
     dce:	c8 2f       	mov	r28, r24
     dd0:	c8 6b       	ori	r28, 0xB8	; 184
     dd2:	6c 2f       	mov	r22, r28
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	c3 df       	rcall	.-122    	; 0xd5e <glcdControlWrite>
     dd8:	6c 2f       	mov	r22, r28
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	c0 df       	rcall	.-128    	; 0xd5e <glcdControlWrite>
	}
}
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <glcdDataWrite>:
#endif
	return data;
}

void glcdDataWrite(u08 data)
{
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	d8 2f       	mov	r29, r24
	register u08 controller = (GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS);
     dec:	0c e6       	ldi	r16, 0x6C	; 108
     dee:	10 e0       	ldi	r17, 0x00	; 0
     df0:	d8 01       	movw	r26, r16
     df2:	ec 91       	ld	r30, X
     df4:	ce 2f       	mov	r28, r30
     df6:	c2 95       	swap	r28
     df8:	c6 95       	lsr	r28
     dfa:	c6 95       	lsr	r28
     dfc:	c3 70       	andi	r28, 0x03	; 3
#ifdef GLCD_PORT_INTERFACE
	cli();
     dfe:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
     e00:	8c 2f       	mov	r24, r28
     e02:	8f df       	rcall	.-226    	; 0xd22 <glcdBusyWait>
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_RS);
     e04:	c0 9a       	sbi	0x18, 0	; 24
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_RW);
     e06:	c1 98       	cbi	0x18, 1	; 24
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
     e08:	c2 9a       	sbi	0x18, 2	; 24
	outb(GLCD_DATA_DDR, 0xFF);
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	81 bb       	out	0x11, r24	; 17
	outb(GLCD_DATA_PORT, data);
     e0e:	d2 bb       	out	0x12, r29	; 18
	...
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
     e20:	c2 98       	cbi	0x18, 2	; 24
	sei();
     e22:	78 94       	sei
	glcdBusyWait(controller);		// wait until LCD not busy
	*(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller) = data;
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	// increment our local address counter
	GrLcdState.ctrlr[controller].xAddr++;
     e24:	ec 2f       	mov	r30, r28
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	e2 59       	subi	r30, 0x92	; 146
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	80 81       	ld	r24, Z
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	80 83       	st	Z, r24
	GrLcdState.lcdXAddr++;
     e36:	f8 01       	movw	r30, r16
     e38:	80 81       	ld	r24, Z
     e3a:	8f 5f       	subi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
     e3e:	88 23       	and	r24, r24
     e40:	34 f4       	brge	.+12     	; 0xe4e <glcdDataWrite+0x6c>
	{
		GrLcdState.lcdYAddr++;
     e42:	81 81       	ldd	r24, Z+1	; 0x01
     e44:	8f 5f       	subi	r24, 0xFF	; 255
     e46:	81 83       	std	Z+1, r24	; 0x01
		glcdSetYAddress(GrLcdState.lcdYAddr);
     e48:	bf df       	rcall	.-130    	; 0xdc8 <glcdSetYAddress>
		glcdSetXAddress(0);
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	a4 df       	rcall	.-184    	; 0xd96 <glcdSetXAddress>
	}
}
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	08 95       	ret

00000e58 <glcdDataRead>:

u08 glcdDataRead(void)
{
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
	register u08 data;
	register u08 controller = (GrLcdState.lcdXAddr/GLCD_CONTROLLER_XPIXELS);
     e60:	0c e6       	ldi	r16, 0x6C	; 108
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	d8 01       	movw	r26, r16
     e66:	ec 91       	ld	r30, X
     e68:	ce 2f       	mov	r28, r30
     e6a:	c2 95       	swap	r28
     e6c:	c6 95       	lsr	r28
     e6e:	c6 95       	lsr	r28
     e70:	c3 70       	andi	r28, 0x03	; 3
#ifdef GLCD_PORT_INTERFACE
	cli();
     e72:	f8 94       	cli
	glcdBusyWait(controller);		// wait until LCD not busy
     e74:	8c 2f       	mov	r24, r28
     e76:	55 df       	rcall	.-342    	; 0xd22 <glcdBusyWait>
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_RS);
     e78:	c0 9a       	sbi	0x18, 0	; 24
	outb(GLCD_DATA_DDR, 0x00);
     e7a:	11 ba       	out	0x11, r1	; 17
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_RW);
     e7c:	c1 9a       	sbi	0x18, 1	; 24
	sbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
     e7e:	c2 9a       	sbi	0x18, 2	; 24
	...
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	asm volatile ("nop"); asm volatile ("nop");
	data = inb(GLCD_DATA_PIN);
     e90:	d0 b3       	in	r29, 0x10	; 16
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_E);
     e92:	c2 98       	cbi	0x18, 2	; 24
	cbi(GLCD_CTRL_PORT, GLCD_CTRL_RW);
     e94:	c1 98       	cbi	0x18, 1	; 24
	sei();
     e96:	78 94       	sei
	glcdBusyWait(controller);		// wait until LCD not busy
	data = *(volatile unsigned char *) (GLCD_CONTROLLER0_CTRL_ADDR + GLCD_CONTROLLER_ADDR_OFFSET*controller);
	//cbi(MCUCR, SRW);				// disable RAM waitstate
#endif
	// increment our local address counter
	GrLcdState.ctrlr[controller].xAddr++;
     e98:	ec 2f       	mov	r30, r28
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	e2 59       	subi	r30, 0x92	; 146
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	80 83       	st	Z, r24
	GrLcdState.lcdXAddr++;
     eaa:	f8 01       	movw	r30, r16
     eac:	80 81       	ld	r24, Z
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	80 83       	st	Z, r24
	if(GrLcdState.lcdXAddr >= GLCD_XPIXELS)
     eb2:	88 23       	and	r24, r24
     eb4:	34 f4       	brge	.+12     	; 0xec2 <glcdDataRead+0x6a>
	{
		GrLcdState.lcdYAddr++;
     eb6:	81 81       	ldd	r24, Z+1	; 0x01
     eb8:	8f 5f       	subi	r24, 0xFF	; 255
     eba:	81 83       	std	Z+1, r24	; 0x01
		glcdSetYAddress(GrLcdState.lcdYAddr);
     ebc:	85 df       	rcall	.-246    	; 0xdc8 <glcdSetYAddress>
		glcdSetXAddress(0);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	6a df       	rcall	.-300    	; 0xd96 <glcdSetXAddress>
	}
	return data;
}
     ec2:	8d 2f       	mov	r24, r29
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	08 95       	ret

00000ece <glcdStartLine>:
		}
	}
}

void glcdStartLine(u08 start)
{
     ece:	cf 93       	push	r28
	glcdControlWrite(0, GLCD_START_LINE | start);
     ed0:	c8 2f       	mov	r28, r24
     ed2:	c0 6c       	ori	r28, 0xC0	; 192
     ed4:	6c 2f       	mov	r22, r28
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	42 df       	rcall	.-380    	; 0xd5e <glcdControlWrite>
	glcdControlWrite(1, GLCD_START_LINE | start);
     eda:	6c 2f       	mov	r22, r28
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	3f df       	rcall	.-386    	; 0xd5e <glcdControlWrite>
}
     ee0:	cf 91       	pop	r28
     ee2:	08 95       	ret

00000ee4 <glcdSetAddress>:

void glcdSetAddress(u08 x, u08 yLine)
{
     ee4:	cf 93       	push	r28
     ee6:	c8 2f       	mov	r28, r24
     ee8:	86 2f       	mov	r24, r22
	// set addresses
	glcdSetYAddress(yLine);
     eea:	6e df       	rcall	.-292    	; 0xdc8 <glcdSetYAddress>
	glcdSetXAddress(x);
     eec:	8c 2f       	mov	r24, r28
     eee:	53 df       	rcall	.-346    	; 0xd96 <glcdSetXAddress>
}
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <glcdHome>:

void glcdHome(void)
{
	u08 i;
	// initialize addresses/positions
	glcdStartLine(0);
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	eb df       	rcall	.-42     	; 0xece <glcdStartLine>
	glcdSetAddress(0,0);
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	f3 df       	rcall	.-26     	; 0xee4 <glcdSetAddress>
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
     efe:	ec e6       	ldi	r30, 0x6C	; 108
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	12 82       	std	Z+2, r1	; 0x02
		GrLcdState.ctrlr[i].yAddr = 0;
     f04:	13 82       	std	Z+3, r1	; 0x03
	glcdStartLine(0);
	glcdSetAddress(0,0);
	// initialize local data structures
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		GrLcdState.ctrlr[i].xAddr = 0;
     f06:	14 82       	std	Z+4, r1	; 0x04
		GrLcdState.ctrlr[i].yAddr = 0;
     f08:	15 82       	std	Z+5, r1	; 0x05
     f0a:	08 95       	ret

00000f0c <glcdClearScreen>:
	}
}

void glcdClearScreen(void)
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
     f10:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// set page address
		glcdSetAddress(0, pageAddr);
     f12:	6d 2f       	mov	r22, r29
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	e6 df       	rcall	.-52     	; 0xee4 <glcdSetAddress>
     f18:	c0 e0       	ldi	r28, 0x00	; 0
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
		{
			glcdDataWrite(0x00);
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	62 df       	rcall	.-316    	; 0xde2 <glcdDataWrite>
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
	{
		// set page address
		glcdSetAddress(0, pageAddr);
		// clear all lines of this page of display memory
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
     f1e:	cf 5f       	subi	r28, 0xFF	; 255
     f20:	c0 38       	cpi	r28, 0x80	; 128
     f22:	d9 f7       	brne	.-10     	; 0xf1a <glcdClearScreen+0xe>
	u08 pageAddr;
	u08 xAddr;

	// clear LCD
	// loop through all pages
	for(pageAddr=0; pageAddr<(GLCD_YPIXELS>>3); pageAddr++)
     f24:	df 5f       	subi	r29, 0xFF	; 255
     f26:	d8 30       	cpi	r29, 0x08	; 8
     f28:	a1 f7       	brne	.-24     	; 0xf12 <glcdClearScreen+0x6>
		for(xAddr=0; xAddr<GLCD_XPIXELS; xAddr++)
		{
			glcdDataWrite(0x00);
		}
	}
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <glcdInit>:

void glcdInit()
{
	u08 i;
	// initialize hardware
	glcdInitHW();
     f30:	d0 de       	rcall	.-608    	; 0xcd2 <glcdInitHW>
	// bring lcd out of reset
	glcdReset(FALSE);
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	2a df       	rcall	.-428    	; 0xd8a <glcdReset>
	// Turn on LCD
	for(i=0; i<GLCD_NUM_CONTROLLERS; i++)
	{
		glcdControlWrite(i, GLCD_ON_CTRL | GLCD_ON_DISPLAY);
     f36:	6f e3       	ldi	r22, 0x3F	; 63
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	11 df       	rcall	.-478    	; 0xd5e <glcdControlWrite>
     f3c:	6f e3       	ldi	r22, 0x3F	; 63
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	0e df       	rcall	.-484    	; 0xd5e <glcdControlWrite>
	}
	// clear lcd
	glcdClearScreen();
     f42:	e4 df       	rcall	.-56     	; 0xf0c <glcdClearScreen>
	// initialize positions
	glcdHome();
     f44:	d7 df       	rcall	.-82     	; 0xef4 <glcdHome>
     f46:	08 95       	ret

00000f48 <glcdGotoChar>:
	glcdSetXAddress(x);
}

void glcdGotoChar(u08 line, u08 col)
{
	glcdSetAddress(col*6, line);
     f48:	96 2f       	mov	r25, r22
     f4a:	99 0f       	add	r25, r25
     f4c:	96 0f       	add	r25, r22
     f4e:	68 2f       	mov	r22, r24
     f50:	89 2f       	mov	r24, r25
     f52:	88 0f       	add	r24, r24
     f54:	c7 df       	rcall	.-114    	; 0xee4 <glcdSetAddress>
     f56:	08 95       	ret

00000f58 <main>:

int main(void)
{
    /* Replace with your application code */
	int j=0;
	glcdInit();
     f58:	eb df       	rcall	.-42     	; 0xf30 <glcdInit>
	rprintfInit(glcdWriteChar);
     f5a:	8e e0       	ldi	r24, 0x0E	; 14
     f5c:	96 e0       	ldi	r25, 0x06	; 6
     f5e:	8a d0       	rcall	.+276    	; 0x1074 <rprintfInit>
#include <util/delay.h>

int main(void)
{
    /* Replace with your application code */
	int j=0;
     f60:	a1 2c       	mov	r10, r1
     f62:	b1 2c       	mov	r11, r1
		glcdClearScreen();
		glcdHome();
		switch (j)
		{
		case 0:
			rprintf("GLCD Test j=%d",j);
     f64:	0f 2e       	mov	r0, r31
     f66:	f7 e2       	ldi	r31, 0x27	; 39
     f68:	cf 2e       	mov	r12, r31
     f6a:	f2 e0       	ldi	r31, 0x02	; 2
     f6c:	df 2e       	mov	r13, r31
     f6e:	f0 2d       	mov	r31, r0
     f70:	99 24       	eor	r9, r9
     f72:	93 94       	inc	r9
     f74:	0f 2e       	mov	r0, r31
     f76:	f6 e3       	ldi	r31, 0x36	; 54
     f78:	ef 2e       	mov	r14, r31
     f7a:	f6 e0       	ldi	r31, 0x06	; 6
     f7c:	ff 2e       	mov	r15, r31
     f7e:	f0 2d       	mov	r31, r0
     f80:	06 e3       	ldi	r16, 0x36	; 54
     f82:	1a e0       	ldi	r17, 0x0A	; 10
	int j=0;
	glcdInit();
	rprintfInit(glcdWriteChar);
    while (1) 
    {
		glcdClearScreen();
     f84:	c3 df       	rcall	.-122    	; 0xf0c <glcdClearScreen>
		glcdHome();
     f86:	b6 df       	rcall	.-148    	; 0xef4 <glcdHome>
		switch (j)
     f88:	27 e0       	ldi	r18, 0x07	; 7
     f8a:	a2 16       	cp	r10, r18
     f8c:	b1 04       	cpc	r11, r1
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <main+0x3a>
     f90:	44 c0       	rjmp	.+136    	; 0x101a <main+0xc2>
     f92:	f5 01       	movw	r30, r10
     f94:	ed 5e       	subi	r30, 0xED	; 237
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	09 94       	ijmp
		{
		case 0:
			rprintf("GLCD Test j=%d",j);
     f9a:	1f 92       	push	r1
     f9c:	1f 92       	push	r1
     f9e:	df 92       	push	r13
     fa0:	cf 92       	push	r12
     fa2:	9f 92       	push	r9
     fa4:	86 d0       	rcall	.+268    	; 0x10b2 <rprintf1RamRom>
			break;
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	a1 2c       	mov	r10, r1
     fb2:	b1 2c       	mov	r11, r1
     fb4:	4f c0       	rjmp	.+158    	; 0x1054 <main+0xfc>
		case 1:
			glcdRectangle(10,5,40,100);
     fb6:	24 e6       	ldi	r18, 0x64	; 100
     fb8:	48 e2       	ldi	r20, 0x28	; 40
     fba:	65 e0       	ldi	r22, 0x05	; 5
     fbc:	8a e0       	ldi	r24, 0x0A	; 10
     fbe:	83 dd       	rcall	.-1274   	; 0xac6 <glcdRectangle>
			break;
     fc0:	49 c0       	rjmp	.+146    	; 0x1054 <main+0xfc>
		case 2:
			glcdCircle(64,32,20);
     fc2:	44 e1       	ldi	r20, 0x14	; 20
     fc4:	60 e2       	ldi	r22, 0x20	; 32
     fc6:	80 e4       	ldi	r24, 0x40	; 64
     fc8:	b2 dd       	rcall	.-1180   	; 0xb2e <glcdCircle>
			break;
     fca:	44 c0       	rjmp	.+136    	; 0x1054 <main+0xfc>
		case 3:
			glcdGotoChar(2,6);
     fcc:	66 e0       	ldi	r22, 0x06	; 6
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	b9 df       	rcall	.-142    	; 0xf48 <glcdGotoChar>
			glcdPutStr("FaraDars");
     fd6:	80 e6       	ldi	r24, 0x60	; 96
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	6d de       	rcall	.-806    	; 0xcb6 <glcdPutStr>
			break;
     fdc:	3b c0       	rjmp	.+118    	; 0x1054 <main+0xfc>
		case 4:
			glcdGotoChar(3,7);
     fde:	67 e0       	ldi	r22, 0x07	; 7
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	b0 df       	rcall	.-160    	; 0xf48 <glcdGotoChar>
			glcdWriteCharGr(0);		
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	3c de       	rcall	.-904    	; 0xc64 <glcdWriteCharGr>
			break;
     fec:	33 c0       	rjmp	.+102    	; 0x1054 <main+0xfc>
     fee:	c6 e3       	ldi	r28, 0x36	; 54
     ff0:	d6 e0       	ldi	r29, 0x06	; 6
		case 5:
			for (int i=0;i<1024;i++)
			{
				glcdDataWrite(pgm_read_byte(logo+i));
     ff2:	fe 01       	movw	r30, r28
     ff4:	84 91       	lpm	r24, Z
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	f4 de       	rcall	.-536    	; 0xde2 <glcdDataWrite>
     ffa:	21 96       	adiw	r28, 0x01	; 1
		case 4:
			glcdGotoChar(3,7);
			glcdWriteCharGr(0);		
			break;
		case 5:
			for (int i=0;i<1024;i++)
     ffc:	c0 17       	cp	r28, r16
     ffe:	d1 07       	cpc	r29, r17
    1000:	c1 f7       	brne	.-16     	; 0xff2 <main+0x9a>
    1002:	28 c0       	rjmp	.+80     	; 0x1054 <main+0xfc>
    1004:	c6 e3       	ldi	r28, 0x36	; 54
    1006:	d2 e0       	ldi	r29, 0x02	; 2
			}
			break;
		case 6:
			for (int i=0;i<1024;i++)
			{
				glcdDataWrite(pgm_read_byte(faradars+i));
    1008:	fe 01       	movw	r30, r28
    100a:	84 91       	lpm	r24, Z
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	e9 de       	rcall	.-558    	; 0xde2 <glcdDataWrite>
    1010:	21 96       	adiw	r28, 0x01	; 1
			{
				glcdDataWrite(pgm_read_byte(logo+i));
			}
			break;
		case 6:
			for (int i=0;i<1024;i++)
    1012:	ce 15       	cp	r28, r14
    1014:	df 05       	cpc	r29, r15
    1016:	c1 f7       	brne	.-16     	; 0x1008 <main+0xb0>
    1018:	11 c0       	rjmp	.+34     	; 0x103c <main+0xe4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    101a:	ff e7       	ldi	r31, 0x7F	; 127
    101c:	2a e1       	ldi	r18, 0x1A	; 26
    101e:	86 e0       	ldi	r24, 0x06	; 6
    1020:	f1 50       	subi	r31, 0x01	; 1
    1022:	20 40       	sbci	r18, 0x00	; 0
    1024:	80 40       	sbci	r24, 0x00	; 0
    1026:	e1 f7       	brne	.-8      	; 0x1020 <main+0xc8>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <main+0xd2>
    102a:	00 00       	nop
				glcdDataWrite(pgm_read_byte(faradars+i));
			}
			break;
		}
		_delay_ms(2000);
		j++;
    102c:	9f ef       	ldi	r25, 0xFF	; 255
    102e:	a9 1a       	sub	r10, r25
    1030:	b9 0a       	sbc	r11, r25
		if(j>6)j=0;
    1032:	e7 e0       	ldi	r30, 0x07	; 7
    1034:	ae 16       	cp	r10, r30
    1036:	b1 04       	cpc	r11, r1
    1038:	d4 f4       	brge	.+52     	; 0x106e <main+0x116>
    103a:	a4 cf       	rjmp	.-184    	; 0xf84 <main+0x2c>
    103c:	ff e7       	ldi	r31, 0x7F	; 127
    103e:	2a e1       	ldi	r18, 0x1A	; 26
    1040:	86 e0       	ldi	r24, 0x06	; 6
    1042:	f1 50       	subi	r31, 0x01	; 1
    1044:	20 40       	sbci	r18, 0x00	; 0
    1046:	80 40       	sbci	r24, 0x00	; 0
    1048:	e1 f7       	brne	.-8      	; 0x1042 <main+0xea>
    104a:	00 c0       	rjmp	.+0      	; 0x104c <main+0xf4>
    104c:	00 00       	nop
	int j=0;
	glcdInit();
	rprintfInit(glcdWriteChar);
    while (1) 
    {
		glcdClearScreen();
    104e:	5e df       	rcall	.-324    	; 0xf0c <glcdClearScreen>
		glcdHome();
    1050:	51 df       	rcall	.-350    	; 0xef4 <glcdHome>
    1052:	a3 cf       	rjmp	.-186    	; 0xf9a <main+0x42>
    1054:	9f e7       	ldi	r25, 0x7F	; 127
    1056:	ea e1       	ldi	r30, 0x1A	; 26
    1058:	f6 e0       	ldi	r31, 0x06	; 6
    105a:	91 50       	subi	r25, 0x01	; 1
    105c:	e0 40       	sbci	r30, 0x00	; 0
    105e:	f0 40       	sbci	r31, 0x00	; 0
    1060:	e1 f7       	brne	.-8      	; 0x105a <main+0x102>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <main+0x10c>
    1064:	00 00       	nop
				glcdDataWrite(pgm_read_byte(faradars+i));
			}
			break;
		}
		_delay_ms(2000);
		j++;
    1066:	2f ef       	ldi	r18, 0xFF	; 255
    1068:	a2 1a       	sub	r10, r18
    106a:	b2 0a       	sbc	r11, r18
    106c:	8b cf       	rjmp	.-234    	; 0xf84 <main+0x2c>
	int j=0;
	glcdInit();
	rprintfInit(glcdWriteChar);
    while (1) 
    {
		glcdClearScreen();
    106e:	4e df       	rcall	.-356    	; 0xf0c <glcdClearScreen>
		glcdHome();
    1070:	41 df       	rcall	.-382    	; 0xef4 <glcdHome>
    1072:	93 cf       	rjmp	.-218    	; 0xf9a <main+0x42>

00001074 <rprintfInit>:
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
	}
}
    1074:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
    1078:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
    107c:	08 95       	ret

0000107e <rprintfChar>:
    107e:	cf 93       	push	r28
    1080:	c8 2f       	mov	r28, r24
    1082:	8a 30       	cpi	r24, 0x0A	; 10
    1084:	31 f4       	brne	.+12     	; 0x1092 <rprintfChar+0x14>
    1086:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
    108a:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
    108e:	8d e0       	ldi	r24, 0x0D	; 13
    1090:	09 95       	icall
    1092:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
    1096:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
    109a:	8c 2f       	mov	r24, r28
    109c:	09 95       	icall
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <rprintfu04>:
    10a2:	8f 70       	andi	r24, 0x0F	; 15
    10a4:	e8 2f       	mov	r30, r24
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	ea 5c       	subi	r30, 0xCA	; 202
    10aa:	f5 4f       	sbci	r31, 0xF5	; 245
    10ac:	84 91       	lpm	r24, Z
    10ae:	e7 df       	rcall	.-50     	; 0x107e <rprintfChar>
    10b0:	08 95       	ret

000010b2 <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    10b2:	2f 92       	push	r2
    10b4:	3f 92       	push	r3
    10b6:	4f 92       	push	r4
    10b8:	5f 92       	push	r5
    10ba:	6f 92       	push	r6
    10bc:	7f 92       	push	r7
    10be:	8f 92       	push	r8
    10c0:	9f 92       	push	r9
    10c2:	af 92       	push	r10
    10c4:	bf 92       	push	r11
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	7d 88       	ldd	r7, Y+21	; 0x15
    10dc:	ce 88       	ldd	r12, Y+22	; 0x16
    10de:	df 88       	ldd	r13, Y+23	; 0x17
	//static char HexChars[16] = "0123456789ABCDEF";
	char format_flag;
	unsigned int u_val, div_val, base;
	va_list ap;

	va_start(ap, format);
    10e0:	4e 01       	movw	r8, r28
    10e2:	28 e1       	ldi	r18, 0x18	; 24
    10e4:	82 0e       	add	r8, r18
    10e6:	91 1c       	adc	r9, r1

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    10e8:	51 2c       	mov	r5, r1
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
    10ea:	61 2c       	mov	r6, r1
    10ec:	41 2c       	mov	r4, r1
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <rprintf1RamRom+0x48>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    10f0:	88 23       	and	r24, r24
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <rprintf1RamRom+0x44>
    10f4:	86 c0       	rjmp	.+268    	; 0x1202 <rprintf1RamRom+0x150>
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    10f6:	c3 df       	rcall	.-122    	; 0x107e <rprintfChar>
    10f8:	68 01       	movw	r12, r16
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    10fa:	77 20       	and	r7, r7
    10fc:	41 f0       	breq	.+16     	; 0x110e <rprintf1RamRom+0x5c>
    10fe:	86 01       	movw	r16, r12
    1100:	0f 5f       	subi	r16, 0xFF	; 255
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	f6 01       	movw	r30, r12
    1106:	84 91       	lpm	r24, Z
    1108:	85 32       	cpi	r24, 0x25	; 37
    110a:	91 f7       	brne	.-28     	; 0x10f0 <rprintf1RamRom+0x3e>
    110c:	08 c0       	rjmp	.+16     	; 0x111e <rprintf1RamRom+0x6c>
    110e:	f6 01       	movw	r30, r12
    1110:	80 81       	ld	r24, Z
    1112:	85 32       	cpi	r24, 0x25	; 37
    1114:	51 f0       	breq	.+20     	; 0x112a <rprintf1RamRom+0x78>
    1116:	86 01       	movw	r16, r12
    1118:	0f 5f       	subi	r16, 0xFF	; 255
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	e9 cf       	rjmp	.-46     	; 0x10f0 <rprintf1RamRom+0x3e>
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    111e:	f2 e0       	ldi	r31, 0x02	; 2
    1120:	cf 0e       	add	r12, r31
    1122:	d1 1c       	adc	r13, r1
    1124:	f8 01       	movw	r30, r16
    1126:	84 91       	lpm	r24, Z
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <rprintf1RamRom+0x84>
    112a:	f6 01       	movw	r30, r12
    112c:	81 81       	ldd	r24, Z+1	; 0x01
    112e:	96 01       	movw	r18, r12
    1130:	2e 5f       	subi	r18, 0xFE	; 254
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	69 01       	movw	r12, r18
    1136:	84 36       	cpi	r24, 0x64	; 100
    1138:	69 f0       	breq	.+26     	; 0x1154 <rprintf1RamRom+0xa2>
    113a:	88 37       	cpi	r24, 0x78	; 120
    113c:	09 f4       	brne	.+2      	; 0x1140 <rprintf1RamRom+0x8e>
    113e:	53 c0       	rjmp	.+166    	; 0x11e6 <rprintf1RamRom+0x134>
    1140:	83 36       	cpi	r24, 0x63	; 99
    1142:	31 f4       	brne	.+12     	; 0x1150 <rprintf1RamRom+0x9e>
		{
			case 'c': format_flag = va_arg(ap,int);
    1144:	f4 01       	movw	r30, r8
    1146:	80 81       	ld	r24, Z
    1148:	94 01       	movw	r18, r8
    114a:	2e 5f       	subi	r18, 0xFE	; 254
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	49 01       	movw	r8, r18
			default:  rprintfChar(format_flag); continue;
    1150:	96 df       	rcall	.-212    	; 0x107e <rprintfChar>
    1152:	d3 cf       	rjmp	.-90     	; 0x10fa <rprintf1RamRom+0x48>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    1154:	f4 01       	movw	r30, r8
    1156:	e0 80       	ld	r14, Z
    1158:	f1 80       	ldd	r15, Z+1	; 0x01
    115a:	32 e0       	ldi	r19, 0x02	; 2
    115c:	83 0e       	add	r8, r19
    115e:	91 1c       	adc	r9, r1
			if (format_flag == 'd')
			{
				if (((int)u_val) < 0)
    1160:	ff 20       	and	r15, r15
    1162:	2c f4       	brge	.+10     	; 0x116e <rprintf1RamRom+0xbc>
				{
					u_val = - u_val;
    1164:	f1 94       	neg	r15
    1166:	e1 94       	neg	r14
    1168:	f1 08       	sbc	r15, r1
					rprintfChar('-');
    116a:	8d e2       	ldi	r24, 0x2D	; 45
    116c:	88 df       	rcall	.-240    	; 0x107e <rprintfChar>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    116e:	80 e1       	ldi	r24, 0x10	; 16
    1170:	e8 16       	cp	r14, r24
    1172:	87 e2       	ldi	r24, 0x27	; 39
    1174:	f8 06       	cpc	r15, r24
    1176:	c8 f4       	brcc	.+50     	; 0x11aa <rprintf1RamRom+0xf8>
    1178:	00 e1       	ldi	r16, 0x10	; 16
    117a:	17 e2       	ldi	r17, 0x27	; 39
    117c:	98 01       	movw	r18, r16
    117e:	ad ec       	ldi	r26, 0xCD	; 205
    1180:	bc ec       	ldi	r27, 0xCC	; 204
    1182:	68 d0       	rcall	.+208    	; 0x1254 <__umulhisi3>
    1184:	8c 01       	movw	r16, r24
    1186:	16 95       	lsr	r17
    1188:	07 95       	ror	r16
    118a:	16 95       	lsr	r17
    118c:	07 95       	ror	r16
    118e:	16 95       	lsr	r17
    1190:	07 95       	ror	r16
    1192:	02 30       	cpi	r16, 0x02	; 2
    1194:	11 05       	cpc	r17, r1
    1196:	88 f0       	brcs	.+34     	; 0x11ba <rprintf1RamRom+0x108>
    1198:	e0 16       	cp	r14, r16
    119a:	f1 06       	cpc	r15, r17
    119c:	78 f3       	brcs	.-34     	; 0x117c <rprintf1RamRom+0xca>

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
    119e:	0f 2e       	mov	r0, r31
    11a0:	fa e0       	ldi	r31, 0x0A	; 10
    11a2:	2f 2e       	mov	r2, r31
    11a4:	f0 2d       	mov	r31, r0
    11a6:	35 2c       	mov	r3, r5
    11a8:	0d c0       	rjmp	.+26     	; 0x11c4 <rprintf1RamRom+0x112>
    11aa:	0f 2e       	mov	r0, r31
    11ac:	fa e0       	ldi	r31, 0x0A	; 10
    11ae:	2f 2e       	mov	r2, r31
    11b0:	f0 2d       	mov	r31, r0
    11b2:	35 2c       	mov	r3, r5
    11b4:	00 e1       	ldi	r16, 0x10	; 16
    11b6:	17 e2       	ldi	r17, 0x27	; 39
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <rprintf1RamRom+0x112>
    11ba:	0f 2e       	mov	r0, r31
    11bc:	fa e0       	ldi	r31, 0x0A	; 10
    11be:	2f 2e       	mov	r2, r31
    11c0:	f0 2d       	mov	r31, r0
    11c2:	35 2c       	mov	r3, r5
				while (div_val > 1 && div_val > u_val) div_val /= 10;
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    11c4:	c7 01       	movw	r24, r14
    11c6:	b8 01       	movw	r22, r16
    11c8:	31 d0       	rcall	.+98     	; 0x122c <__udivmodhi4>
    11ca:	a8 2e       	mov	r10, r24
    11cc:	b9 2e       	mov	r11, r25
    11ce:	86 2f       	mov	r24, r22
    11d0:	68 df       	rcall	.-304    	; 0x10a2 <rprintfu04>
				u_val %= div_val;
    11d2:	ea 2c       	mov	r14, r10
    11d4:	fb 2c       	mov	r15, r11
				div_val /= base;
    11d6:	c8 01       	movw	r24, r16
    11d8:	62 2d       	mov	r22, r2
    11da:	73 2d       	mov	r23, r3
    11dc:	27 d0       	rcall	.+78     	; 0x122c <__udivmodhi4>
    11de:	8b 01       	movw	r16, r22
			} while (div_val);
    11e0:	67 2b       	or	r22, r23
    11e2:	81 f7       	brne	.-32     	; 0x11c4 <rprintf1RamRom+0x112>
    11e4:	8a cf       	rjmp	.-236    	; 0x10fa <rprintf1RamRom+0x48>
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    11e6:	f4 01       	movw	r30, r8
    11e8:	e0 80       	ld	r14, Z
    11ea:	f1 80       	ldd	r15, Z+1	; 0x01
    11ec:	94 01       	movw	r18, r8
    11ee:	2e 5f       	subi	r18, 0xFE	; 254
    11f0:	3f 4f       	sbci	r19, 0xFF	; 255
    11f2:	49 01       	movw	r8, r18
		{
			case 'c': format_flag = va_arg(ap,int);
			default:  rprintfChar(format_flag); continue;
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;
    11f4:	68 94       	set
    11f6:	22 24       	eor	r2, r2
    11f8:	24 f8       	bld	r2, 4
    11fa:	36 2c       	mov	r3, r6
    11fc:	04 2d       	mov	r16, r4
    11fe:	10 e1       	ldi	r17, 0x10	; 16
    1200:	e1 cf       	rjmp	.-62     	; 0x11c4 <rprintf1RamRom+0x112>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	bf 90       	pop	r11
    1218:	af 90       	pop	r10
    121a:	9f 90       	pop	r9
    121c:	8f 90       	pop	r8
    121e:	7f 90       	pop	r7
    1220:	6f 90       	pop	r6
    1222:	5f 90       	pop	r5
    1224:	4f 90       	pop	r4
    1226:	3f 90       	pop	r3
    1228:	2f 90       	pop	r2
    122a:	08 95       	ret

0000122c <__udivmodhi4>:
    122c:	aa 1b       	sub	r26, r26
    122e:	bb 1b       	sub	r27, r27
    1230:	51 e1       	ldi	r21, 0x11	; 17
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <__udivmodhi4_ep>

00001234 <__udivmodhi4_loop>:
    1234:	aa 1f       	adc	r26, r26
    1236:	bb 1f       	adc	r27, r27
    1238:	a6 17       	cp	r26, r22
    123a:	b7 07       	cpc	r27, r23
    123c:	10 f0       	brcs	.+4      	; 0x1242 <__udivmodhi4_ep>
    123e:	a6 1b       	sub	r26, r22
    1240:	b7 0b       	sbc	r27, r23

00001242 <__udivmodhi4_ep>:
    1242:	88 1f       	adc	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	5a 95       	dec	r21
    1248:	a9 f7       	brne	.-22     	; 0x1234 <__udivmodhi4_loop>
    124a:	80 95       	com	r24
    124c:	90 95       	com	r25
    124e:	bc 01       	movw	r22, r24
    1250:	cd 01       	movw	r24, r26
    1252:	08 95       	ret

00001254 <__umulhisi3>:
    1254:	a2 9f       	mul	r26, r18
    1256:	b0 01       	movw	r22, r0
    1258:	b3 9f       	mul	r27, r19
    125a:	c0 01       	movw	r24, r0
    125c:	a3 9f       	mul	r26, r19
    125e:	01 d0       	rcall	.+2      	; 0x1262 <__umulhisi3+0xe>
    1260:	b2 9f       	mul	r27, r18
    1262:	70 0d       	add	r23, r0
    1264:	81 1d       	adc	r24, r1
    1266:	11 24       	eor	r1, r1
    1268:	91 1d       	adc	r25, r1
    126a:	08 95       	ret

0000126c <_exit>:
    126c:	f8 94       	cli

0000126e <__stop_program>:
    126e:	ff cf       	rjmp	.-2      	; 0x126e <__stop_program>
